{
  "name": "UIDragger",
  "source": [
    [
      "UI.ts",
      411,
      22
    ]
  ],
  "kind": "Class",
  "id": 1067,
  "comment": "[Experimental] A draggable UI that provides handler such as [`UIDragger.onDrag`](#link) and [`UIDragger.onDrop`](#link).",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "UI.ts",
          416,
          32
        ]
      ],
      "id": 1072,
      "flags": {},
      "overrides": "UIButton.__constructor",
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a dragger which has all the states in UIButton, with additional \"dragging\" (a boolean indicating whether it's currently being dragged) and \"offset\" (a Pt representing the offset between this UI's position and the pointer's position when dragged) states. (See [`UI.state`](#link)) You may also create a new UIDragger using one of the static helper like [`UI.fromRectangle`](#link) or [`UI.fromCircle`](#link).",
          "returns": "UIDragger",
          "returns_comment": false,
          "parameters": [
            {
              "name": "group",
              "comment": "a Group that defines the UI's appearance",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "shape",
              "comment": "specifies the shape of the Group",
              "type": "string",
              "default": false
            },
            {
              "name": "states",
              "comment": "Optional default state object",
              "type": "",
              "default": "{}"
            },
            {
              "name": "id",
              "comment": "Optional id string\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "group",
      "source": [
        [
          "UI.ts",
          109,
          11
        ],
        [
          "UI.ts",
          110,
          11
        ]
      ],
      "id": 1144,
      "flags": {},
      "overrides": false,
      "inherits": "UI.group",
      "comment": "A group of Pts that defines this UI's shape.",
      "getter": {
        "type": "Group"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "d",
          "comment": "",
          "type": "Group",
          "default": false
        }
      }
    },
    {
      "name": "id",
      "source": [
        [
          "UI.ts",
          102,
          8
        ],
        [
          "UI.ts",
          103,
          8
        ]
      ],
      "id": 1140,
      "flags": {},
      "overrides": false,
      "inherits": "UI.id",
      "comment": "An unique id of the UI.",
      "getter": {
        "type": "string"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "d",
          "comment": "",
          "type": "string",
          "default": false
        }
      }
    },
    {
      "name": "shape",
      "source": [
        [
          "UI.ts",
          116,
          11
        ],
        [
          "UI.ts",
          117,
          11
        ]
      ],
      "id": 1148,
      "flags": {},
      "overrides": false,
      "inherits": "UI.shape",
      "comment": "A string that describes this UI's shape.",
      "getter": {
        "type": "string"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "d",
          "comment": "",
          "type": "string",
          "default": false
        }
      }
    }
  ],
  "methods": [
    {
      "name": "hold",
      "source": [
        [
          "UI.ts",
          190,
          16
        ]
      ],
      "id": 1169,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": "UI.hold",
      "signatures": [
        {
          "comment": "Continue to keep track of an actions even if it's not within this UI. Useful for hover-leave and drag-outside.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "type",
              "comment": "a string defined in [`UIPointerActions`](#link)\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "listen",
      "source": [
        [
          "UI.ts",
          171,
          8
        ]
      ],
      "id": 1164,
      "flags": {},
      "overrides": false,
      "inherits": "UI.listen",
      "signatures": [
        {
          "comment": "Listen for UI events and trigger action handlers.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "type",
              "comment": "an action type. Can be one of UIPointerActions or a custom one.",
              "type": "string",
              "default": false
            },
            {
              "name": "evt",
              "comment": "a MouseEvent emitted by the browser (See [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent))",
              "type": "MouseEvent",
              "default": false
            },
            {
              "name": "p",
              "comment": "a point to check\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "off",
      "source": [
        [
          "UI.ts",
          154,
          5
        ]
      ],
      "id": 1160,
      "flags": {},
      "overrides": false,
      "inherits": "UI.off",
      "signatures": [
        {
          "comment": "Remove an event handler.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "type",
              "comment": "event type",
              "type": "string",
              "default": false
            },
            {
              "name": "which",
              "comment": "an ID number returned by [`UI.on`](#link). If this is not defined, all handlers in this type will be removed.",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "offClick",
      "source": [
        [
          "UI.ts",
          373,
          10
        ]
      ],
      "id": 1096,
      "flags": {},
      "overrides": false,
      "inherits": "UIButton.offClick",
      "signatures": [
        {
          "comment": "Remove an existing click handler",
          "returns": "boolean",
          "returns_comment": "a boolean indicating whether the handler was removed successfully\n",
          "parameters": [
            {
              "name": "id",
              "comment": "an ID number returned by [`UIButton.onClick`](#link). If this is not defined, all handlers in this type will be removed.",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "offDrag",
      "source": [
        [
          "UI.ts",
          506,
          9
        ]
      ],
      "id": 1084,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Remove an existing drag handler",
          "returns": "boolean",
          "returns_comment": "a boolean indicating whether the handler was removed successfully\n",
          "parameters": [
            {
              "name": "id",
              "comment": "an ID number returned by [`UIDragger.onDrag`](#link). If this is not defined, all handlers in this type will be removed.",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "offDrop",
      "source": [
        [
          "UI.ts",
          526,
          9
        ]
      ],
      "id": 1090,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Remove an existing drop handler",
          "returns": "boolean",
          "returns_comment": "a boolean indicating whether the handler was removed successfully\n",
          "parameters": [
            {
              "name": "id",
              "comment": "an ID number returned by [`UIDragger.onDrag`](#link). If this is not defined, all handlers in this type will be removed.",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "offHover",
      "source": [
        [
          "UI.ts",
          398,
          10
        ]
      ],
      "id": 1103,
      "flags": {},
      "overrides": false,
      "inherits": "UIButton.offHover",
      "signatures": [
        {
          "comment": "Remove handlers for hover events.",
          "returns": "boolean[]",
          "returns_comment": "an array of booleans indicating whether the handlers were removed successfully\n",
          "parameters": [
            {
              "name": "enterID",
              "comment": "an ID number returned by [`UI.onClick`](#link), or -1 to skip. If this is not defined, all handlers in this type will be removed.",
              "type": "number",
              "default": false
            },
            {
              "name": "leaveID",
              "comment": "an ID number returned by [`UI.onClick`](#link), or -1 to skip. If this is not defined, all handlers in this type will be removed.",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "on",
      "source": [
        [
          "UI.ts",
          142,
          4
        ]
      ],
      "id": 1156,
      "flags": {},
      "overrides": false,
      "inherits": "UI.on",
      "signatures": [
        {
          "comment": "Add an event handler. Remember this UI will also need to be tracked for events via `UI.track`.",
          "returns": "number",
          "returns_comment": "an id number that reference to this handler, for use in [`UI.off`](#link)\n",
          "parameters": [
            {
              "name": "type",
              "comment": "event type",
              "type": "string",
              "default": false
            },
            {
              "name": "fn",
              "comment": "a [`UIHandler`](#link) callback function: `fn( target:UI, pt:Pt, type:string )`",
              "type": "UIHandler",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "onClick",
      "source": [
        [
          "UI.ts",
          363,
          9
        ]
      ],
      "id": 1093,
      "flags": {},
      "overrides": false,
      "inherits": "UIButton.onClick",
      "signatures": [
        {
          "comment": "Add a new click handler. Remember this button will also need to be tracked for events via `UI.track`.",
          "returns": "number",
          "returns_comment": "an id number that refers to this handler, for use in [`UIButton.offClick`](#link) or [`UI.off`](#link).\n",
          "parameters": [
            {
              "name": "fn",
              "comment": "a [`UIHandler`](#link) callback function: `fn( target:UI, pt:Pt, type:string )`",
              "type": "UIHandler",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "onDrag",
      "source": [
        [
          "UI.ts",
          496,
          8
        ]
      ],
      "id": 1081,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Add a new drag handler. Remember this button will also need to be tracked for events via `UI.track`.",
          "returns": "number",
          "returns_comment": "an id number that refers to this handler, for use in [`UIDragger.offDrag`](#link) or [`UI.off`](#link).\n",
          "parameters": [
            {
              "name": "fn",
              "comment": "a [`UIHandler`](#link) callback function: `fn( target:UI, pt:Pt, type:string )`. You can access the states \"dragging\" and \"offset\" (See [`UI.state`](#link)) in the callback.",
              "type": "UIHandler",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "onDrop",
      "source": [
        [
          "UI.ts",
          516,
          8
        ]
      ],
      "id": 1087,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Add a new drop handler. Remember this button will also need to be tracked for events via `UI.track`.",
          "returns": "number",
          "returns_comment": "an id number that refers to this handler, for use in [`UIDragger.offDrop`](#link) or [`UI.off`](#link).\n",
          "parameters": [
            {
              "name": "fn",
              "comment": "a [`UIHandler`](#link) callback function: `fn( target:UI, pt:Pt, type:string )`",
              "type": "UIHandler",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "onHover",
      "source": [
        [
          "UI.ts",
          384,
          9
        ]
      ],
      "id": 1099,
      "flags": {},
      "overrides": false,
      "inherits": "UIButton.onHover",
      "signatures": [
        {
          "comment": "Add handlers for hover events. Remember this button will also need to be tracked for events via `UI.track`.",
          "returns": "number[]",
          "returns_comment": "id numbers that refer to enter/leave handlers, for use in [`UIButton.offHover`](#link) or [`UI.off`](#link).\n",
          "parameters": [
            {
              "name": "enter",
              "comment": "an optional [`UIHandler`](#link) function to handle when pointer enters hover. Eg, `fn( target:UI, pt:Pt, type:string )`",
              "type": "UIHandler",
              "default": false
            },
            {
              "name": "leave",
              "comment": "an optional [`UIHandler`](#link) function to handle when pointer exits hover. Eg, `fn( target:UI, pt:Pt, type:string )`",
              "type": "UIHandler",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "render",
      "source": [
        [
          "UI.ts",
          228,
          8
        ]
      ],
      "id": 1181,
      "flags": {},
      "overrides": false,
      "inherits": "UI.render",
      "signatures": [
        {
          "comment": "Take a custom render function to render this UI.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "fn",
              "comment": "a render function\n",
              "type": " Fn(group:Group, )",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "state",
      "source": [
        [
          "UI.ts",
          126,
          7
        ]
      ],
      "id": 1152,
      "flags": {},
      "overrides": false,
      "inherits": "UI.state",
      "signatures": [
        {
          "comment": "Get and/or set a specific UI state.",
          "returns": "any",
          "returns_comment": false,
          "parameters": [
            {
              "name": "key",
              "comment": "state's name",
              "type": "string",
              "default": false
            },
            {
              "name": "value",
              "comment": "optionally set a new value for this state.key",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toString",
      "source": [
        [
          "UI.ts",
          236,
          10
        ]
      ],
      "id": 1191,
      "flags": {},
      "overrides": false,
      "inherits": "UI.toString",
      "signatures": [
        {
          "comment": "Returns a string representation of this UI",
          "returns": "string",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "unhold",
      "source": [
        [
          "UI.ts",
          201,
          18
        ]
      ],
      "id": 1172,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": "UI.unhold",
      "signatures": [
        {
          "comment": "Stop keeping track of this action",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "key",
              "comment": "an id returned by the [`UI.hold`](#link) function\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromCircle",
      "source": [
        [
          "UI.ts",
          73,
          19
        ]
      ],
      "id": 1125,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": "UI.fromCircle",
      "signatures": [
        {
          "comment": "A static helper function to create a Circle UI.",
          "returns": "UI",
          "returns_comment": false,
          "parameters": [
            {
              "name": "group",
              "comment": "a group that defines a rectangle",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "states",
              "comment": "optional a state object keep track of custom states for this UI",
              "type": "__type",
              "default": false
            },
            {
              "name": "id",
              "comment": "optional id string\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromPolygon",
      "source": [
        [
          "UI.ts",
          84,
          20
        ]
      ],
      "id": 1130,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": "UI.fromPolygon",
      "signatures": [
        {
          "comment": "A static helper function to create a Polygon UI.",
          "returns": "UI",
          "returns_comment": false,
          "parameters": [
            {
              "name": "group",
              "comment": "a group that defines a rectangle",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "states",
              "comment": "optional a state object keep track of custom states for this UI",
              "type": "__type",
              "default": false
            },
            {
              "name": "id",
              "comment": "optional id string\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromRectangle",
      "source": [
        [
          "UI.ts",
          62,
          22
        ]
      ],
      "id": 1120,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": "UI.fromRectangle",
      "signatures": [
        {
          "comment": "A static helper function to create a Rectangle UI.",
          "returns": "UI",
          "returns_comment": false,
          "parameters": [
            {
              "name": "group",
              "comment": "a group that defines a rectangle",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "states",
              "comment": "optional a state object keep track of custom states for this UI",
              "type": "__type",
              "default": false
            },
            {
              "name": "id",
              "comment": "optional id string\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromUI",
      "source": [
        [
          "UI.ts",
          94,
          15
        ]
      ],
      "id": 1135,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": "UI.fromUI",
      "signatures": [
        {
          "comment": "A static helper function to create a new UI based on another UI.",
          "returns": "UI",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ui",
              "comment": "base UI",
              "type": "UI",
              "default": false
            },
            {
              "name": "states",
              "comment": "optional a state object keep track of custom states for this UI\n",
              "type": "object",
              "default": false
            },
            {
              "name": "id",
              "comment": "",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "track",
      "source": [
        [
          "UI.ts",
          217,
          14
        ]
      ],
      "id": 1175,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": "UI.track",
      "signatures": [
        {
          "comment": "A static function to listen for a list of UIs. See also [`UI.listen`](#link).",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "uis",
              "comment": "an array of UI",
              "type": "UI[]",
              "default": false
            },
            {
              "name": "type",
              "comment": "an action type. Can be one of `UIPointerActions` or a custom one.",
              "type": "string",
              "default": false
            },
            {
              "name": "evt",
              "comment": "a MouseEvent emitted by the browser (See [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent))",
              "type": "MouseEvent",
              "default": false
            },
            {
              "name": "p",
              "comment": "a point to check\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [],
  "flags": {},
  "extends": [
    "UIButton"
  ],
  "implements": []
}