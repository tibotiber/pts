{
  "name": "Sound",
  "source": [
    [
      "Play.ts",
      150,
      18
    ]
  ],
  "kind": "Class",
  "id": 6642,
  "comment": "Sound class simplifies common tasks like audio inputs and visualizations using a subset of Web Audio API. It can be used with other audio libraries like tone.js, and extended to support additional web audio functions. See [the guide](../guide/Sound-0800.html) to get started.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "Play.ts",
          174,
          30
        ]
      ],
      "id": 6652,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Construct a `Sound` instance. Usually, it's more convenient to use one of the static methods like [`Sound.load`](#function_load) or [`Sound.from`](#function_from).",
          "returns": "Sound",
          "returns_comment": false,
          "parameters": [
            {
              "name": "type",
              "comment": "a `SoundType` string: \"file\", \"input\", or \"gen\"\n",
              "type": "SoundType",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "binSize",
      "source": [
        [
          "Play.ts",
          387,
          13
        ]
      ],
      "id": 6702,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "If an analyzer is added (see [`analyze`](##unction_analyze) function), get the number of frequency bins in the analyzer.",
      "getter": {
        "type": "number"
      },
      "setter": false
    },
    {
      "name": "buffer",
      "source": [
        [
          "Play.ts",
          342,
          12
        ],
        [
          "Play.ts",
          343,
          12
        ]
      ],
      "id": 6690,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get this Sound's AudioBuffer (if any) instance for advanced use-cases. See [`Sound.loadAsBuffer`](#link).",
      "getter": {
        "type": "AudioBuffer"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "b",
          "comment": "",
          "type": "AudioBuffer",
          "default": false
        }
      }
    },
    {
      "name": "ctx",
      "source": [
        [
          "Play.ts",
          318,
          9
        ]
      ],
      "id": 6682,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get this Sound's AudioContext instance for advanced use-cases.",
      "getter": {
        "type": "AudioContext"
      },
      "setter": false
    },
    {
      "name": "frequency",
      "source": [
        [
          "Play.ts",
          403,
          15
        ],
        [
          "Play.ts",
          406,
          15
        ]
      ],
      "id": 6706,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "If the sound is generated, this sets and gets the frequency of the tone.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "f",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "node",
      "source": [
        [
          "Play.ts",
          324,
          10
        ]
      ],
      "id": 6684,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get this Sound's AudioNode subclass instance for advanced use-cases.",
      "getter": {
        "type": "AudioNode"
      },
      "setter": false
    },
    {
      "name": "playable",
      "source": [
        [
          "Play.ts",
          379,
          14
        ]
      ],
      "id": 6700,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Indicate whether the sound is ready to play. When loading from a file, this corresponds to a [\"canplaythrough\"](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState) event.\nYou can also use `this.source.addEventListener( 'canplaythrough', ...)` if needed. See also [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event).",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "playing",
      "source": [
        [
          "Play.ts",
          355,
          13
        ]
      ],
      "id": 6696,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Indicate whether the sound is currently playing.",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "progress",
      "source": [
        [
          "Play.ts",
          361,
          14
        ]
      ],
      "id": 6698,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "A value between 0 to 1 to indicate playback progress.",
      "getter": {
        "type": "number"
      },
      "setter": false
    },
    {
      "name": "sampleRate",
      "source": [
        [
          "Play.ts",
          395,
          16
        ]
      ],
      "id": 6704,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the sample rate of the audio, for example, at 44100 hz.",
      "getter": {
        "type": "number"
      },
      "setter": false
    },
    {
      "name": "source",
      "source": [
        [
          "Play.ts",
          336,
          12
        ]
      ],
      "id": 6688,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get this Sound's Audio element (if used) instance for advanced use-cases. See [`Sound.load`](#link).",
      "getter": {
        "type": "HTMLMediaElement"
      },
      "setter": false
    },
    {
      "name": "stream",
      "source": [
        [
          "Play.ts",
          330,
          12
        ]
      ],
      "id": 6686,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get this Sound's MediaStream (eg, from microphone, if in use) instance for advanced use-cases. See [`Sound.input`](#link)",
      "getter": {
        "type": "MediaStream"
      },
      "setter": false
    },
    {
      "name": "type",
      "source": [
        [
          "Play.ts",
          349,
          10
        ]
      ],
      "id": 6694,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the type of input for this Sound instance. Either \"file\", \"input\", or \"gen\"",
      "getter": {
        "type": "SoundType"
      },
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "analyze",
      "source": [
        [
          "Play.ts",
          428,
          9
        ]
      ],
      "id": 6713,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Add an analyzer to this `Sound`. Call this once only.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "size",
              "comment": "the number of frequency bins",
              "type": "number",
              "default": "256"
            },
            {
              "name": "minDb",
              "comment": "Optional minimum decibels (corresponds to `AnalyserNode.minDecibels`)",
              "type": "number",
              "default": "-100"
            },
            {
              "name": "maxDb",
              "comment": "Optional maximum decibels (corresponds to `AnalyserNode.maxDecibels`)",
              "type": "number",
              "default": "-30"
            },
            {
              "name": "smooth",
              "comment": "Optional smoothing value (corresponds to `AnalyserNode.smoothingTimeConstant`)\n",
              "type": "number",
              "default": "0.8"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "connect",
      "source": [
        [
          "Play.ts",
          415,
          9
        ]
      ],
      "id": 6710,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Connect another AudioNode to this `Sound` instance's AudioNode. Using this function, you can extend the capabilities of this `Sound` instance for advanced use cases such as filtering.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "node",
              "comment": "another AudioNode\n",
              "type": "AudioNode",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "createBuffer",
      "source": [
        [
          "Play.ts",
          257,
          24
        ]
      ],
      "id": 6668,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create or re-use an AudioBuffer. Only needed if you are using `Sound.loadAsBuffer`.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "buf",
              "comment": "an AudioBuffer. Optionally, you can call this without parameters to re-use existing buffer.\n",
              "type": "AudioBuffer",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "freqDomain",
      "source": [
        [
          "Play.ts",
          493,
          12
        ]
      ],
      "id": 6735,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the raw frequency-domain data from analyzer as unsigned 8-bit integers. An analyzer must be added before calling this function (See [analyze](#function_analyze) function).",
          "returns": "Uint8Array",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "freqDomainTo",
      "source": [
        [
          "Play.ts",
          506,
          14
        ]
      ],
      "id": 6737,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Map the frequency-domain data from analyzer to a range. An analyzer must be added before calling this function (See [analyze](#function_analyze) function).",
          "returns": "Group",
          "returns_comment": "a Group containing the mapped values",
          "parameters": [
            {
              "name": "size",
              "comment": "map each data point `[index, value]` to `[width, height]`",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "position",
              "comment": "Optionally, set a starting `[x, y]` position. Default is `[0, 0]`",
              "type": "PtLike",
              "default": "[0,0]"
            },
            {
              "name": "trim",
              "comment": "Optionally, trim the start and end values by `[startTrim, data.length-endTrim]`",
              "type": "number[]",
              "default": "[0,0]"
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.point( s.freqDomainTo( space.size ) )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "reset",
      "source": [
        [
          "Play.ts",
          514,
          7
        ]
      ],
      "id": 6742,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Stop playing and disconnect the AudioNode.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "start",
      "source": [
        [
          "Play.ts",
          525,
          7
        ]
      ],
      "id": 6744,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Start playing. Internally this connects the `AudioNode` to `AudioContext`'s destination.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "timeAt",
              "comment": "optional parameter to play from a specific time\n",
              "type": "number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "stop",
      "source": [
        [
          "Play.ts",
          551,
          6
        ]
      ],
      "id": 6747,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Stop playing. Internally this also disconnects the `AudioNode` from `AudioContext`'s destination.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "timeDomain",
      "source": [
        [
          "Play.ts",
          472,
          12
        ]
      ],
      "id": 6728,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the raw time-domain data from analyzer as unsigned 8-bit integers. An analyzer must be added before calling this function (See [analyze](#function_analyze) function).",
          "returns": "Uint8Array",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "timeDomainTo",
      "source": [
        [
          "Play.ts",
          485,
          14
        ]
      ],
      "id": 6730,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Map the time-domain data from analyzer to a range. An analyzer must be added before calling this function (See [analyze](#function_analyze) function).",
          "returns": "Group",
          "returns_comment": "a Group containing the mapped values",
          "parameters": [
            {
              "name": "size",
              "comment": "map each data point `[index, value]` to `[width, height]`",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "position",
              "comment": "Optionally, set a starting `[x, y]` position. Default is `[0, 0]`",
              "type": "PtLike",
              "default": "[0,0]"
            },
            {
              "name": "trim",
              "comment": "Optionally, trim the start and end values by `[startTrim, data.length-endTrim]`",
              "type": "number[]",
              "default": "[0,0]"
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "form.point( s.timeDomainTo( space.size ) )\n"
            }
          ]
        }
      ]
    },
    {
      "name": "toggle",
      "source": [
        [
          "Play.ts",
          578,
          8
        ]
      ],
      "id": 6749,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Toggle between `start` and `stop`. This won't work if using [`Sound.loadAsBuffer`](#link), since `AudioBuffer` can only be played once. (See [`Sound.createBuffer`](#link) to reset buffer for replay).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "from",
      "source": [
        [
          "Play.ts",
          197,
          13
        ]
      ],
      "id": 6655,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a `Sound` given an [AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode) and an [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) from Web Audio API. See also [this example](../guide/js/examples/tone.html) using tone.js in the [guide](../guide/Sound-0800.html).",
          "returns": "Sound",
          "returns_comment": "a `Sound` instance\n",
          "parameters": [
            {
              "name": "node",
              "comment": "an AudioNode instance",
              "type": "AudioNode",
              "default": false
            },
            {
              "name": "ctx",
              "comment": "an AudioContext instance",
              "type": "AudioContext",
              "default": false
            },
            {
              "name": "type",
              "comment": "a string representing a type of input source: either \"file\", \"input\", or \"gen\".",
              "type": "SoundType",
              "default": "\"gen\""
            },
            {
              "name": "stream",
              "comment": "Optionally include a MediaStream, if the type is \"input\"",
              "type": "MediaStream",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "generate",
      "source": [
        [
          "Play.ts",
          274,
          17
        ]
      ],
      "id": 6671,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a `Sound` by generating a waveform using [OscillatorNode](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode).",
          "returns": "Sound",
          "returns_comment": "a `Sound` instance",
          "parameters": [
            {
              "name": "type",
              "comment": "a string representing the waveform type: \"sine\", \"square\", \"sawtooth\", \"triangle\", \"custom\"",
              "type": "OscillatorType",
              "default": false
            },
            {
              "name": "val",
              "comment": "the frequency value in Hz to play, or a PeriodicWave instance if type is \"custom\".",
              "type": "number | PeriodicWave",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`Sound.generate( 'sine', 120 )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "input",
      "source": [
        [
          "Play.ts",
          300,
          20
        ]
      ],
      "id": 6679,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a `Sound` by streaming from an input device like microphone. Note that this function returns a Promise which resolves to a Sound instance.",
          "returns": "Promise",
          "returns_comment": "a `Promise` which resolves to `Sound` instance",
          "parameters": [
            {
              "name": "constraint",
              "comment": "@param constraint Optional constraints which can be used to select a specific input device. For example, you may use [`enumerateDevices`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices) to find a specific deviceId;",
              "type": "MediaStreamConstraints",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`Sound.input().then( s => sound = s );`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "load",
      "source": [
        [
          "Play.ts",
          213,
          13
        ]
      ],
      "id": 6661,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a `Sound` by loading from a sound file or an audio element.",
          "returns": "Promise",
          "returns_comment": "a `Sound` instance",
          "parameters": [
            {
              "name": "source",
              "comment": "either an url string to load a sound file, or an audio element.",
              "type": "HTMLMediaElement | string",
              "default": false
            },
            {
              "name": "crossOrigin",
              "comment": "whether to support loading cross-origin. Default is \"anonymous\".",
              "type": "string",
              "default": "\"anonymous\""
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`Sound.load( '/path/to/file.mp3' )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "loadAsBuffer",
      "source": [
        [
          "Play.ts",
          235,
          21
        ]
      ],
      "id": 6665,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a `Sound` by loading from a sound file url as `AudioBufferSourceNode`. This method is cumbersome since it can only be played once.\nUse this method for now if you need to visualize sound in Safari and iOS. Once Apple has full support for FFT with streaming `HTMLMediaElement`, this method will likely be deprecated.",
          "returns": "Promise",
          "returns_comment": false,
          "parameters": [
            {
              "name": "url",
              "comment": "an url to the sound file\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [
    {
      "name": "analyzer",
      "source": [
        [
          "Play.ts",
          170,
          10
        ]
      ],
      "id": 6649,
      "flags": {},
      "type": "analyzer",
      "overrides": false,
      "inherits": false,
      "comment": "Analyzer if any"
    }
  ],
  "flags": {},
  "extends": [],
  "implements": []
}