{
  "name": "Bound",
  "source": [
    [
      "Pt.ts",
      941,
      18
    ]
  ],
  "kind": "Class",
  "id": 2446,
  "comment": "Bound is a subclass of [`Group`](#link) that represents a rectangular boundary.\nIt includes some convenient accessors (eg, bottomRight, center) for bounding box calculations.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "Pt.ts",
          947,
          28
        ]
      ],
      "id": 2452,
      "flags": {},
      "overrides": "Group.__constructor",
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a Bound. This is similar to the Group constructor. You can also create a Bound via the static function [`Bound.fromGroup`](#link).",
          "returns": "Bound",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "a list of Pt as parameters",
              "type": "Pt[]",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "see",
              "text": "Bound.fromGroup\n"
            }
          ]
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "bottomRight",
      "source": [
        [
          "Pt.ts",
          1089,
          17
        ],
        [
          "Pt.ts",
          1090,
          17
        ]
      ],
      "id": 2487,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Bottom-right position of this Bound",
      "getter": {
        "type": "Pt"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "p",
          "comment": "",
          "type": "Pt",
          "default": false
        }
      }
    },
    {
      "name": "center",
      "source": [
        [
          "Pt.ts",
          1068,
          12
        ],
        [
          "Pt.ts",
          1069,
          12
        ]
      ],
      "id": 2479,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Center position of this Bound",
      "getter": {
        "type": "Pt"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "p",
          "comment": "",
          "type": "Pt",
          "default": false
        }
      }
    },
    {
      "name": "depth",
      "source": [
        [
          "Pt.ts",
          1120,
          11
        ],
        [
          "Pt.ts",
          1121,
          11
        ]
      ],
      "id": 2499,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Depth of this Bound",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "d",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "height",
      "source": [
        [
          "Pt.ts",
          1110,
          12
        ],
        [
          "Pt.ts",
          1111,
          12
        ]
      ],
      "id": 2495,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Height of this Bound",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "h",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "id",
      "source": [
        [
          "Pt.ts",
          540,
          8
        ],
        [
          "Pt.ts",
          541,
          8
        ]
      ],
      "id": 2514,
      "flags": {},
      "overrides": false,
      "inherits": "Group.id",
      "comment": "ID string of this Group",
      "getter": {
        "type": "string"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "s",
          "comment": "",
          "type": "string",
          "default": false
        }
      }
    },
    {
      "name": "inited",
      "source": [
        [
          "Pt.ts",
          1148,
          12
        ]
      ],
      "id": 2509,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Whether this Bound has been initiated",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "p1",
      "source": [
        [
          "Pt.ts",
          546,
          8
        ]
      ],
      "id": 2518,
      "flags": {},
      "overrides": false,
      "inherits": "Group.p1",
      "comment": "The first Pt in this Group",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "p2",
      "source": [
        [
          "Pt.ts",
          551,
          8
        ]
      ],
      "id": 2520,
      "flags": {},
      "overrides": false,
      "inherits": "Group.p2",
      "comment": "The second Pt in this Group",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "p3",
      "source": [
        [
          "Pt.ts",
          556,
          8
        ]
      ],
      "id": 2522,
      "flags": {},
      "overrides": false,
      "inherits": "Group.p3",
      "comment": "The third Pt in this Group",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "p4",
      "source": [
        [
          "Pt.ts",
          561,
          8
        ]
      ],
      "id": 2524,
      "flags": {},
      "overrides": false,
      "inherits": "Group.p4",
      "comment": "The forth Pt in this Group",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "q1",
      "source": [
        [
          "Pt.ts",
          566,
          8
        ]
      ],
      "id": 2526,
      "flags": {},
      "overrides": false,
      "inherits": "Group.q1",
      "comment": "The last Pt in this Group",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "q2",
      "source": [
        [
          "Pt.ts",
          571,
          8
        ]
      ],
      "id": 2528,
      "flags": {},
      "overrides": false,
      "inherits": "Group.q2",
      "comment": "The second-last Pt in this Group",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "q3",
      "source": [
        [
          "Pt.ts",
          576,
          8
        ]
      ],
      "id": 2530,
      "flags": {},
      "overrides": false,
      "inherits": "Group.q3",
      "comment": "The third-last Pt in this Group",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "q4",
      "source": [
        [
          "Pt.ts",
          581,
          8
        ]
      ],
      "id": 2532,
      "flags": {},
      "overrides": false,
      "inherits": "Group.q4",
      "comment": "The forth-last Pt in this Group",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "size",
      "source": [
        [
          "Pt.ts",
          1058,
          10
        ],
        [
          "Pt.ts",
          1059,
          10
        ]
      ],
      "id": 2475,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Size of this Bound",
      "getter": {
        "type": "Pt"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "p",
          "comment": "",
          "type": "Pt",
          "default": false
        }
      }
    },
    {
      "name": "topLeft",
      "source": [
        [
          "Pt.ts",
          1078,
          13
        ],
        [
          "Pt.ts",
          1079,
          13
        ]
      ],
      "id": 2483,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Top-left position of this Bound",
      "getter": {
        "type": "Pt"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "p",
          "comment": "",
          "type": "Pt",
          "default": false
        }
      }
    },
    {
      "name": "width",
      "source": [
        [
          "Pt.ts",
          1100,
          11
        ],
        [
          "Pt.ts",
          1101,
          11
        ]
      ],
      "id": 2491,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Width of this Bound",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "w",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "x",
      "source": [
        [
          "Pt.ts",
          1130,
          7
        ]
      ],
      "id": 2503,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "First value of the Bound's top-left position",
      "getter": {
        "type": "number"
      },
      "setter": false
    },
    {
      "name": "y",
      "source": [
        [
          "Pt.ts",
          1136,
          7
        ]
      ],
      "id": 2505,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Second value of the Bound's top-left position",
      "getter": {
        "type": "number"
      },
      "setter": false
    },
    {
      "name": "z",
      "source": [
        [
          "Pt.ts",
          1142,
          7
        ]
      ],
      "id": 2507,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Third value of the Bound's top-left position",
      "getter": {
        "type": "number"
      },
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "$matrixAdd",
      "source": [
        [
          "Pt.ts",
          888,
          12
        ]
      ],
      "id": 2637,
      "flags": {},
      "overrides": false,
      "inherits": "Group.$matrixAdd",
      "signatures": [
        {
          "comment": "Apply this group as a matrix and calculate matrix addition.",
          "returns": "Group",
          "returns_comment": "a new Group\n",
          "parameters": [
            {
              "name": "g",
              "comment": "a scalar number, an array of numeric arrays, or a group of Pt",
              "type": "GroupLike | number[][] | number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$matrixMultiply",
      "source": [
        [
          "Pt.ts",
          900,
          17
        ]
      ],
      "id": 2640,
      "flags": {},
      "overrides": false,
      "inherits": "Group.$matrixMultiply",
      "signatures": [
        {
          "comment": "Apply this group as a matrix and calculate matrix multiplication.",
          "returns": "Group",
          "returns_comment": "If not elementwise, this will return a new  Group with M Pt, each with N dimensions (M-rows, N-columns).\n",
          "parameters": [
            {
              "name": "g",
              "comment": "a scalar number, an array of numeric arrays, or a Group of K Pts, each with N dimensions (K-rows, N-columns) -- or if transposed is true, then N Pts with K dimensions",
              "type": "GroupLike | number",
              "default": false
            },
            {
              "name": "transposed",
              "comment": "(Only applicable if it's not elementwise multiplication) If true, then a and b's columns should match (ie, each Pt should have the same dimensions). Default is `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "elementwise",
              "comment": "if true, then the multiplication is done element-wise. Default is `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$zip",
      "source": [
        [
          "Pt.ts",
          920,
          6
        ]
      ],
      "id": 2649,
      "flags": {},
      "overrides": false,
      "inherits": "Group.$zip",
      "signatures": [
        {
          "comment": "Zip a group of Pt. eg, [[1,2],[3,4],[5,6]] => [[1,3,5],[2,4,6]].",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "defaultValue",
              "comment": "a default value to fill if index out of bound. If not provided, it will throw an error instead.",
              "type": "number | boolean",
              "default": " undefined"
            },
            {
              "name": "useLongest",
              "comment": "If true, find the longest list of values in a Pt and use its length for zipping. Default is false, which uses the first item's length for zipping.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "add",
      "source": [
        [
          "Pt.ts",
          851,
          5
        ]
      ],
      "id": 2625,
      "flags": {},
      "overrides": false,
      "inherits": "Group.add",
      "signatures": [
        {
          "comment": "Add scalar or vector values to this group's Pts.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "anchorFrom",
      "source": [
        [
          "Pt.ts",
          701,
          12
        ]
      ],
      "id": 2567,
      "flags": {},
      "overrides": false,
      "inherits": "Group.anchorFrom",
      "signatures": [
        {
          "comment": "Anchor all the Pts in this Group by its absolute position from a target Pt. (ie, add all Pt with the target anchor to get an absolute position).  All the Pts' values will be updated.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ptOrIndex",
              "comment": "a Pt, or a numeric index to target a specific Pt in this Group\n",
              "type": "PtLike | number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "anchorTo",
      "source": [
        [
          "Pt.ts",
          694,
          10
        ]
      ],
      "id": 2564,
      "flags": {},
      "overrides": false,
      "inherits": "Group.anchorTo",
      "signatures": [
        {
          "comment": "Anchor all the Pts in this Group using a target Pt as origin. (ie, subtract all Pt with the target anchor to get a relative position). All the Pts' values will be updated.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ptOrIndex",
              "comment": "a Pt, or a numeric index to target a specific Pt in this Group\n",
              "type": "PtLike | number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "boundingBox",
      "source": [
        [
          "Pt.ts",
          685,
          13
        ]
      ],
      "id": 2562,
      "flags": {},
      "overrides": false,
      "inherits": "Group.boundingBox",
      "signatures": [
        {
          "comment": "Find the rectangular bounding box of this group's Pts.",
          "returns": "Group",
          "returns_comment": "a Group of 2 Pts representing the top-left and bottom-right of the rectangle\n",
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "centroid",
      "source": [
        [
          "Pt.ts",
          676,
          10
        ]
      ],
      "id": 2560,
      "flags": {},
      "overrides": false,
      "inherits": "Group.centroid",
      "signatures": [
        {
          "comment": "Find the centroid of this group's Pts, which is the average middle point.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "clone",
      "source": [
        [
          "Pt.ts",
          1005,
          7
        ]
      ],
      "id": 2463,
      "flags": {},
      "overrides": "Group.clone",
      "inherits": false,
      "signatures": [
        {
          "comment": "Clone this bound and return a new one.",
          "returns": "Bound",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "concat",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1221,
          10
        ],
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1226,
          10
        ]
      ],
      "id": 2663,
      "flags": {},
      "overrides": false,
      "inherits": "Array.concat",
      "signatures": [
        {
          "comment": "Combines two or more arrays.",
          "returns": "Pt[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "items",
              "comment": "Additional items to add to the end of array1.\n",
              "type": "ConcatArray[]",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "Combines two or more arrays.",
          "returns": "Pt[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "items",
              "comment": "Additional items to add to the end of array1.\n",
              "type": "T[] | ConcatArray[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "copyWithin",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
          64,
          14
        ]
      ],
      "id": 2851,
      "flags": {},
      "overrides": false,
      "inherits": "Array.copyWithin",
      "signatures": [
        {
          "comment": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "target",
              "comment": "If target is negative, it is treated as length+target where length is the\nlength of the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "start",
              "comment": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.",
              "type": "number",
              "default": false
            },
            {
              "name": "end",
              "comment": "If not specified, length of the this object is used as its default value.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "divide",
      "source": [
        [
          "Pt.ts",
          878,
          8
        ]
      ],
      "id": 2634,
      "flags": {},
      "overrides": false,
      "inherits": "Group.divide",
      "signatures": [
        {
          "comment": "Divide this group's Pts over scalar or vector values (as element-wise).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "entries",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          57,
          11
        ]
      ],
      "id": 2858,
      "flags": {},
      "overrides": false,
      "inherits": "Array.entries",
      "signatures": [
        {
          "comment": "Returns an iterable of key, value pairs for every entry in the array",
          "returns": "IterableIterator",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "every",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1286,
          9
        ]
      ],
      "id": 2705,
      "flags": {},
      "overrides": false,
      "inherits": "Array.every",
      "signatures": [
        {
          "comment": "Determines whether all the members of an array satisfy the specified test.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.",
              "type": " Fn(value:Pt, index:number, array:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fill",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
          53,
          8
        ]
      ],
      "id": 2846,
      "flags": {},
      "overrides": false,
      "inherits": "Array.fill",
      "signatures": [
        {
          "comment": "Returns the this object after filling the section identified by start and end with value",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "value",
              "comment": "value to fill array section with",
              "type": "Pt",
              "default": false
            },
            {
              "name": "start",
              "comment": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "end",
              "comment": "index to stop filling the array at. If end is negative, it is treated as\nlength+end.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "filter",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1310,
          10
        ],
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1316,
          10
        ]
      ],
      "id": 2742,
      "flags": {},
      "overrides": false,
      "inherits": "Array.filter",
      "signatures": [
        {
          "comment": "Returns the elements of an array that meet the condition specified in a callback function.",
          "returns": "S[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.",
              "type": " Fn(value:Pt, index:number, array:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "Returns the elements of an array that meet the condition specified in a callback function.",
          "returns": "Pt[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.",
              "type": " Fn(value:Pt, index:number, array:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "find",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
          31,
          8
        ],
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
          32,
          8
        ]
      ],
      "id": 2818,
      "flags": {},
      "overrides": false,
      "inherits": "Array.find",
      "signatures": [
        {
          "comment": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.",
          "returns": "S | undefined",
          "returns_comment": false,
          "parameters": [
            {
              "name": "predicate",
              "comment": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.",
              "type": " Fn(value:Pt, index:number, obj:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "",
          "returns": "Pt | undefined",
          "returns_comment": false,
          "parameters": [
            {
              "name": "predicate",
              "comment": "",
              "type": " Fn(value:Pt, index:number, obj:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "findIndex",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
          43,
          13
        ]
      ],
      "id": 2837,
      "flags": {},
      "overrides": false,
      "inherits": "Array.findIndex",
      "signatures": [
        {
          "comment": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "predicate",
              "comment": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.",
              "type": " Fn(value:Pt, index:number, obj:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "forEach",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1298,
          11
        ]
      ],
      "id": 2723,
      "flags": {},
      "overrides": false,
      "inherits": "Array.forEach",
      "signatures": [
        {
          "comment": "Performs the specified action for each element in an array.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.",
              "type": " Fn(value:Pt, index:number, array:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "forEachPt",
      "source": [
        [
          "Pt.ts",
          835,
          11
        ]
      ],
      "id": 2621,
      "flags": {},
      "overrides": false,
      "inherits": "Group.forEachPt",
      "signatures": [
        {
          "comment": "Update each Pt in this Group with an existing Pt function.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ptFn",
              "comment": "string name of an existing Pt function. Note that the function must return Pt.",
              "type": "string",
              "default": false
            },
            {
              "name": "args",
              "comment": "arguments for the function specified in ptFn\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "indexOf",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1274,
          11
        ]
      ],
      "id": 2697,
      "flags": {},
      "overrides": false,
      "inherits": "Array.indexOf",
      "signatures": [
        {
          "comment": "Returns the index of the first occurrence of a value in an array.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "searchElement",
              "comment": "The value to locate in the array.",
              "type": "Pt",
              "default": false
            },
            {
              "name": "fromIndex",
              "comment": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "init",
      "source": [
        [
          "Pt.ts",
          986,
          16
        ]
      ],
      "id": 2461,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Initiate the bound's properties.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "insert",
      "source": [
        [
          "Pt.ts",
          638,
          8
        ]
      ],
      "id": 2545,
      "flags": {},
      "overrides": false,
      "inherits": "Group.insert",
      "signatures": [
        {
          "comment": "Insert a Pt into this group.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "Another group of Pts",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "index",
              "comment": "the index position to insert into\n",
              "type": "number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "interpolate",
      "source": [
        [
          "Pt.ts",
          737,
          13
        ]
      ],
      "id": 2590,
      "flags": {},
      "overrides": false,
      "inherits": "Group.interpolate",
      "signatures": [
        {
          "comment": "Get an interpolated point on the line segments defined by this Group.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "t",
              "comment": "a value between 0 to 1 usually\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "join",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1231,
          8
        ]
      ],
      "id": 2668,
      "flags": {},
      "overrides": false,
      "inherits": "Array.join",
      "signatures": [
        {
          "comment": "Adds all the elements of an array separated by the specified separator string.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [
            {
              "name": "separator",
              "comment": "A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "keys",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          62,
          8
        ]
      ],
      "id": 2860,
      "flags": {},
      "overrides": false,
      "inherits": "Array.keys",
      "signatures": [
        {
          "comment": "Returns an iterable of keys in the array",
          "returns": "IterableIterator",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "lastIndexOf",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1280,
          15
        ]
      ],
      "id": 2701,
      "flags": {},
      "overrides": false,
      "inherits": "Array.lastIndexOf",
      "signatures": [
        {
          "comment": "Returns the index of the last occurrence of a specified value in an array.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "searchElement",
              "comment": "The value to locate in the array.",
              "type": "Pt",
              "default": false
            },
            {
              "name": "fromIndex",
              "comment": "The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "lines",
      "source": [
        [
          "Pt.ts",
          670,
          7
        ]
      ],
      "id": 2558,
      "flags": {},
      "overrides": false,
      "inherits": "Group.lines",
      "signatures": [
        {
          "comment": "Get all the line segments (ie, edges in a graph) of this group.",
          "returns": "Group[]",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "map",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1304,
          7
        ]
      ],
      "id": 2732,
      "flags": {},
      "overrides": false,
      "inherits": "Array.map",
      "signatures": [
        {
          "comment": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
          "returns": "U[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.",
              "type": " Fn(value:Pt, index:number, array:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "moveBy",
      "source": [
        [
          "Pt.ts",
          750,
          8
        ]
      ],
      "id": 2593,
      "flags": {},
      "overrides": false,
      "inherits": "Group.moveBy",
      "signatures": [
        {
          "comment": "Move every Pt's position by a specific amount. Same as [`Group.add`](#link).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "moveTo",
      "source": [
        [
          "Pt.ts",
          759,
          8
        ]
      ],
      "id": 2596,
      "flags": {},
      "overrides": false,
      "inherits": "Group.moveTo",
      "signatures": [
        {
          "comment": "Move the first Pt in this group to a specific position, and move all the other Pts correspondingly.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "multiply",
      "source": [
        [
          "Pt.ts",
          869,
          10
        ]
      ],
      "id": 2631,
      "flags": {},
      "overrides": false,
      "inherits": "Group.multiply",
      "signatures": [
        {
          "comment": "Multiply scalar or vector values (as element-wise) with this group's Pts.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "op",
      "source": [
        [
          "Pt.ts",
          710,
          4
        ]
      ],
      "id": 2570,
      "flags": {},
      "overrides": false,
      "inherits": "Group.op",
      "signatures": [
        {
          "comment": "Create an operation using this Group, passing this Group into a custom function's first parameter.  See the [Op guide](../guide/Op-0400.html) for details.",
          "returns": " Fn(rest:any[])",
          "returns_comment": "a resulting function that takes other parameters required in `fn`\n",
          "parameters": [
            {
              "name": "fn",
              "comment": "any function that takes a Group as its first parameter",
              "type": " Fn(g1:GroupLike, rest:any[])",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`let myOp = group.op( fn ); let result = myOp( [1,2,3] );`"
            }
          ]
        }
      ]
    },
    {
      "name": "ops",
      "source": [
        [
          "Pt.ts",
          724,
          5
        ]
      ],
      "id": 2580,
      "flags": {},
      "overrides": false,
      "inherits": "Group.ops",
      "signatures": [
        {
          "comment": "This combines a series of operations into an array. See the [Op guide](../guide/Op-0400.html) for details.",
          "returns": " Fn(rest:any[])",
          "returns_comment": "an array of resulting functions\n",
          "parameters": [
            {
              "name": "fns",
              "comment": "an array of functions for `op`",
              "type": " Fn(g1:GroupLike, rest:any[])",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`let myOps = pt.ops([fn1, fn2, fn3]); let results = myOps.map( (op) => op([1,2,3]) );`"
            }
          ]
        }
      ]
    },
    {
      "name": "pop",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1211,
          7
        ]
      ],
      "id": 2658,
      "flags": {},
      "overrides": false,
      "inherits": "Array.pop",
      "signatures": [
        {
          "comment": "Removes the last element from an array and returns it.",
          "returns": "Pt | undefined",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "push",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1216,
          8
        ]
      ],
      "id": 2660,
      "flags": {},
      "overrides": false,
      "inherits": "Array.push",
      "signatures": [
        {
          "comment": "Appends new elements to an array, and returns the new length of the array.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "items",
              "comment": "New elements of the Array.\n",
              "type": "Pt[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reduce",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1322,
          10
        ],
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1323,
          10
        ],
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1329,
          10
        ]
      ],
      "id": 2760,
      "flags": {},
      "overrides": false,
      "inherits": "Array.reduce",
      "signatures": [
        {
          "comment": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.",
              "type": " Fn(previousValue:Pt, currentValue:Pt, currentIndex:number, array:Pt[])",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "",
              "type": " Fn(previousValue:Pt, currentValue:Pt, currentIndex:number, array:Pt[])",
              "default": false
            },
            {
              "name": "initialValue",
              "comment": "",
              "type": "Pt",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "returns": "U",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.",
              "type": " Fn(previousValue:U, currentValue:Pt, currentIndex:number, array:Pt[])",
              "default": false
            },
            {
              "name": "initialValue",
              "comment": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n",
              "type": "U",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reduceRight",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1335,
          15
        ],
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1336,
          15
        ],
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1342,
          15
        ]
      ],
      "id": 2788,
      "flags": {},
      "overrides": false,
      "inherits": "Array.reduceRight",
      "signatures": [
        {
          "comment": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.",
              "type": " Fn(previousValue:Pt, currentValue:Pt, currentIndex:number, array:Pt[])",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "",
              "type": " Fn(previousValue:Pt, currentValue:Pt, currentIndex:number, array:Pt[])",
              "default": false
            },
            {
              "name": "initialValue",
              "comment": "",
              "type": "Pt",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "returns": "U",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.",
              "type": " Fn(previousValue:U, currentValue:Pt, currentIndex:number, array:Pt[])",
              "default": false
            },
            {
              "name": "initialValue",
              "comment": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n",
              "type": "U",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reflect2D",
      "source": [
        [
          "Pt.ts",
          812,
          11
        ]
      ],
      "id": 2613,
      "flags": {},
      "overrides": false,
      "inherits": "Group.reflect2D",
      "signatures": [
        {
          "comment": "Reflect this group's Pts along a 2D line. Default anchor point is the first Pt in this group.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "line",
              "comment": "a Group of 2 Pts that defines a line for reflection",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional axis such as \"yz\" to define a 2D plane of reflection\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "remove",
      "source": [
        [
          "Pt.ts",
          650,
          8
        ]
      ],
      "id": 2549,
      "flags": {},
      "overrides": false,
      "inherits": "Group.remove",
      "signatures": [
        {
          "comment": "Like Array's splice function, with support for negative index and a friendlier name.",
          "returns": "Group",
          "returns_comment": "The items that are removed.\n",
          "parameters": [
            {
              "name": "index",
              "comment": "start index, which can be negative (where -1 is at index 0, -2 at index 1, etc)",
              "type": "number",
              "default": "0"
            },
            {
              "name": "count",
              "comment": "number of items to remove",
              "type": "number",
              "default": "1"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reverse",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1235,
          11
        ]
      ],
      "id": 2671,
      "flags": {},
      "overrides": false,
      "inherits": "Array.reverse",
      "signatures": [
        {
          "comment": "Reverses the elements in an Array.",
          "returns": "Pt[]",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "rotate2D",
      "source": [
        [
          "Pt.ts",
          785,
          10
        ]
      ],
      "id": 2603,
      "flags": {},
      "overrides": false,
      "inherits": "Group.rotate2D",
      "signatures": [
        {
          "comment": "Rotate this group's Pt from an anchor point in 2D. Default anchor point is the first Pt in this group.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "angle",
              "comment": "rotate angle",
              "type": "number",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to scale from",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional string such as \"yz\" to specify a 2D plane\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "scale",
      "source": [
        [
          "Pt.ts",
          771,
          7
        ]
      ],
      "id": 2599,
      "flags": {},
      "overrides": false,
      "inherits": "Group.scale",
      "signatures": [
        {
          "comment": "Scale this group's Pts from an anchor point. Default anchor point is the first Pt in this group.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "scale",
              "comment": "scale ratio",
              "type": "number | number[] | PtLike",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to scale from\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "segments",
      "source": [
        [
          "Pt.ts",
          662,
          10
        ]
      ],
      "id": 2553,
      "flags": {},
      "overrides": false,
      "inherits": "Group.segments",
      "signatures": [
        {
          "comment": "Split this group into an array of sub-group segments.",
          "returns": "Group[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts_per_segment",
              "comment": "number of Pts in each segment",
              "type": "number",
              "default": "2"
            },
            {
              "name": "stride",
              "comment": "forward-step to take",
              "type": "number",
              "default": "1"
            },
            {
              "name": "loopBack",
              "comment": "if `true`, always go through the array till the end and loop back to the beginning to complete the segments if needed\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "shear2D",
      "source": [
        [
          "Pt.ts",
          799,
          9
        ]
      ],
      "id": 2608,
      "flags": {},
      "overrides": false,
      "inherits": "Group.shear2D",
      "signatures": [
        {
          "comment": "Shear this group's Pt from an anchor point in 2D. Default anchor point is the first Pt in this group.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "scale",
              "comment": "",
              "type": "number | number[] | PtLike",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to scale from",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional string such as \"yz\" to specify a 2D plane\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "shift",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1239,
          9
        ]
      ],
      "id": 2673,
      "flags": {},
      "overrides": false,
      "inherits": "Array.shift",
      "signatures": [
        {
          "comment": "Removes the first element from an array and returns it.",
          "returns": "Pt | undefined",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "slice",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1245,
          9
        ]
      ],
      "id": 2675,
      "flags": {},
      "overrides": false,
      "inherits": "Array.slice",
      "signatures": [
        {
          "comment": "Returns a section of an array.",
          "returns": "Pt[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "start",
              "comment": "The beginning of the specified portion of the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "end",
              "comment": "The end of the specified portion of the array.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "some",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1292,
          8
        ]
      ],
      "id": 2714,
      "flags": {},
      "overrides": false,
      "inherits": "Array.some",
      "signatures": [
        {
          "comment": "Determines whether the specified callback function returns true for any element of an array.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.",
              "type": " Fn(value:Pt, index:number, array:Pt[])",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "sort",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1250,
          8
        ]
      ],
      "id": 2679,
      "flags": {},
      "overrides": false,
      "inherits": "Array.sort",
      "signatures": [
        {
          "comment": "Sorts an array.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "compareFn",
              "comment": "The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\n",
              "type": " Fn(a:Pt, b:Pt)",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "sortByDimension",
      "source": [
        [
          "Pt.ts",
          825,
          17
        ]
      ],
      "id": 2617,
      "flags": {},
      "overrides": false,
      "inherits": "Group.sortByDimension",
      "signatures": [
        {
          "comment": "Sort this group's Pts by values in a specific dimension.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "dim",
              "comment": "dimensional index",
              "type": "number",
              "default": false
            },
            {
              "name": "desc",
              "comment": "if true, sort descending. Default is false (ascending)\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "splice",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1256,
          10
        ],
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1263,
          10
        ]
      ],
      "id": 2686,
      "flags": {},
      "overrides": false,
      "inherits": "Array.splice",
      "signatures": [
        {
          "comment": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
          "returns": "Pt[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "start",
              "comment": "The zero-based location in the array from which to start removing elements.",
              "type": "number",
              "default": false
            },
            {
              "name": "deleteCount",
              "comment": "The number of elements to remove.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
          "returns": "Pt[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "start",
              "comment": "The zero-based location in the array from which to start removing elements.",
              "type": "number",
              "default": false
            },
            {
              "name": "deleteCount",
              "comment": "The number of elements to remove.",
              "type": "number",
              "default": false
            },
            {
              "name": "items",
              "comment": "Elements to insert into the array in place of the deleted elements.\n",
              "type": "Pt[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "split",
      "source": [
        [
          "Pt.ts",
          627,
          7
        ]
      ],
      "id": 2540,
      "flags": {},
      "overrides": false,
      "inherits": "Group.split",
      "signatures": [
        {
          "comment": "Split this Group into an array of sub-groups.",
          "returns": "Group[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "chunkSize",
              "comment": "number of items per sub-group",
              "type": "number",
              "default": false
            },
            {
              "name": "stride",
              "comment": "forward-steps after each sub-group",
              "type": "number",
              "default": false
            },
            {
              "name": "loopBack",
              "comment": "if `true`, always go through the array till the end and loop back to the beginning to complete the segments if needed\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "subtract",
      "source": [
        [
          "Pt.ts",
          860,
          10
        ]
      ],
      "id": 2628,
      "flags": {},
      "overrides": false,
      "inherits": "Group.subtract",
      "signatures": [
        {
          "comment": "Subtract scalar or vector values from this group's Pts.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toLocaleString",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1207,
          18
        ]
      ],
      "id": 2656,
      "flags": {},
      "overrides": false,
      "inherits": "Array.toLocaleString",
      "signatures": [
        {
          "comment": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "toString",
      "source": [
        [
          "Pt.ts",
          928,
          10
        ]
      ],
      "id": 2653,
      "flags": {},
      "overrides": "Array.toString",
      "inherits": "Group.toString",
      "signatures": [
        {
          "comment": "Get a string representation of this group.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "unshift",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1268,
          11
        ]
      ],
      "id": 2694,
      "flags": {},
      "overrides": false,
      "inherits": "Array.unshift",
      "signatures": [
        {
          "comment": "Inserts new elements at the start of an array.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "items",
              "comment": "Elements to insert at the start of the Array.\n",
              "type": "Pt[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "update",
      "source": [
        [
          "Pt.ts",
          1156,
          8
        ]
      ],
      "id": 2511,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "If the Bound's Pts are changed, call this function to update the Bound's properties.\nIt's simpler and preferable to change the Bound's properties (eg, topLeft, bottomRight) instead of updating the Bound's Pts.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "values",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          67,
          10
        ]
      ],
      "id": 2862,
      "flags": {},
      "overrides": false,
      "inherits": "Array.values",
      "signatures": [
        {
          "comment": "Returns an iterable of values in the array",
          "returns": "IterableIterator",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "zipSlice",
      "source": [
        [
          "Pt.ts",
          910,
          10
        ]
      ],
      "id": 2645,
      "flags": {},
      "overrides": false,
      "inherits": "Group.zipSlice",
      "signatures": [
        {
          "comment": "Zip one slice of an array of Pt. Imagine the Pts are organized in rows, then this function will take the values in a specific column.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "index",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "defaultValue",
              "comment": "a default value to fill if index out of bound. If not provided, it will throw an error instead.\n",
              "type": "number | boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromArray",
      "source": [
        [
          "Pt.ts",
          602,
          18
        ]
      ],
      "id": 2534,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": "Group.fromArray",
      "signatures": [
        {
          "comment": "Convert an array of numeric arrays into a Group of Pts.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "list",
              "comment": "an array of numeric arrays",
              "type": "PtLike[]",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`Group.fromArray( [[1,2], [3,4], [5,6]] )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "fromBoundingRect",
      "source": [
        [
          "Pt.ts",
          966,
          25
        ]
      ],
      "id": 2455,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a Bound from a [`ClientRect`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) object.",
          "returns": "Bound",
          "returns_comment": "a Bound object\n",
          "parameters": [
            {
              "name": "rect",
              "comment": "an object that has {top, left, bottom, right, width, height} properties",
              "type": "ClientRect",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromGroup",
      "source": [
        [
          "Pt.ts",
          977,
          18
        ]
      ],
      "id": 2458,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a Bound from a Group or an array of Pts",
          "returns": "Bound",
          "returns_comment": false,
          "parameters": [
            {
              "name": "g",
              "comment": "a Group instance or an array of Pts\n",
              "type": "GroupLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromPtArray",
      "source": [
        [
          "Pt.ts",
          616,
          20
        ]
      ],
      "id": 2537,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": "Group.fromPtArray",
      "signatures": [
        {
          "comment": "Convert an array of Pts into a Group.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "list",
              "comment": "an array of Pts\n",
              "type": "GroupLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [
    {
      "name": "length",
      "source": [
        [
          "/Users/william/Art/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          1199,
          10
        ]
      ],
      "id": 2655,
      "flags": {},
      "type": "length",
      "overrides": false,
      "inherits": "Array.length",
      "comment": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array."
    }
  ],
  "flags": {},
  "extends": [
    "Group"
  ],
  "implements": [
    "IPt"
  ]
}