{
  "name": "Color",
  "source": [
    [
      "Color.ts",
      12,
      18
    ]
  ],
  "kind": "Class",
  "id": 3696,
  "comment": "Color is a subclass of Pt. Since a color in a color space is analogous to a point or vector in a space, you can apply all Pt operations to colors too. The Color class provides support for many color spaces like HSL and LAB.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "Color.ts",
          31,
          4
        ]
      ],
      "id": 3708,
      "flags": {},
      "overrides": "Pt.__constructor",
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a Color. Same as creating a Pt. Optionally you may use [`Color.from`](#link) to create a color.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "a",
      "source": [
        [
          "Color.ts",
          231,
          7
        ],
        [
          "Color.ts",
          232,
          7
        ]
      ],
      "id": 3779,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `a` value in LAB color mode. Same as `y`.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "alpha",
      "source": [
        [
          "Color.ts",
          256,
          11
        ],
        [
          "Color.ts",
          257,
          11
        ]
      ],
      "id": 3795,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get alpha value",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "b",
      "source": [
        [
          "Color.ts",
          199,
          7
        ],
        [
          "Color.ts",
          200,
          7
        ]
      ],
      "id": 3763,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `b` value in RGB/LAB/HSB color mode. Same as `z`.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "c",
      "source": [
        [
          "Color.ts",
          237,
          7
        ],
        [
          "Color.ts",
          238,
          7
        ]
      ],
      "id": 3783,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `c` value in LCH color mode. Same as `y`.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "g",
      "source": [
        [
          "Color.ts",
          193,
          7
        ],
        [
          "Color.ts",
          194,
          7
        ]
      ],
      "id": 3759,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `g` value in RGB color mode. Same as `y`.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "h",
      "source": [
        [
          "Color.ts",
          206,
          7
        ],
        [
          "Color.ts",
          207,
          7
        ]
      ],
      "id": 3767,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `h` value in HSL/HSB or LCH color mode. Same as either `x` or `z` depending on current color mode.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "hex",
      "source": [
        [
          "Color.ts",
          134,
          16
        ]
      ],
      "id": 3741,
      "flags": {
        "isPublic": true
      },
      "overrides": false,
      "inherits": false,
      "comment": "Get a hex string such as \"#FF0000\". Same as `toString(\"hex\")`.",
      "getter": {
        "type": "string"
      },
      "setter": false
    },
    {
      "name": "id",
      "source": [
        [
          "Pt.ts",
          51,
          8
        ],
        [
          "Pt.ts",
          52,
          8
        ]
      ],
      "id": 3908,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.id",
      "comment": "ID string of this Pt",
      "getter": {
        "type": "string"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "s",
          "comment": "",
          "type": "string",
          "default": false
        }
      }
    },
    {
      "name": "l",
      "source": [
        [
          "Color.ts",
          221,
          7
        ],
        [
          "Color.ts",
          222,
          7
        ]
      ],
      "id": 3775,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `l` value in HSL or LCH/LAB color mode. Same as either `x` or `z` depending on current color mode.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "mode",
      "source": [
        [
          "Color.ts",
          180,
          10
        ]
      ],
      "id": 3753,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get this Color's mode.",
      "getter": {
        "type": "ColorType"
      },
      "setter": false
    },
    {
      "name": "normalized",
      "source": [
        [
          "Color.ts",
          262,
          16
        ],
        [
          "Color.ts",
          263,
          16
        ]
      ],
      "id": 3799,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Check if color values are normalized (between 0 to 1). If conversion is needed, use [`Color.normalize`](#link) function.",
      "getter": {
        "type": "boolean"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "b",
          "comment": "",
          "type": "boolean",
          "default": false
        }
      }
    },
    {
      "name": "r",
      "source": [
        [
          "Color.ts",
          187,
          7
        ],
        [
          "Color.ts",
          188,
          7
        ]
      ],
      "id": 3755,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `r` value in RGB color mode. Same as `x`.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "rgb",
      "source": [
        [
          "Color.ts",
          139,
          16
        ]
      ],
      "id": 3743,
      "flags": {
        "isPublic": true
      },
      "overrides": false,
      "inherits": false,
      "comment": "Get a rgb string such as \"rgb(255,0,0)\". Same as `toString(\"rgb\")`.",
      "getter": {
        "type": "string"
      },
      "setter": false
    },
    {
      "name": "rgba",
      "source": [
        [
          "Color.ts",
          144,
          17
        ]
      ],
      "id": 3745,
      "flags": {
        "isPublic": true
      },
      "overrides": false,
      "inherits": false,
      "comment": "Get a rgba string such as \"rgb(255,0,0,0.5)\". Same as `toString(\"rgba\")`.",
      "getter": {
        "type": "string"
      },
      "setter": false
    },
    {
      "name": "s",
      "source": [
        [
          "Color.ts",
          215,
          7
        ],
        [
          "Color.ts",
          216,
          7
        ]
      ],
      "id": 3771,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `s` value in HSL/HSB color mode. Same as `y`.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "u",
      "source": [
        [
          "Color.ts",
          243,
          7
        ],
        [
          "Color.ts",
          244,
          7
        ]
      ],
      "id": 3787,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `u` value in LUV color mode. Same as `y`.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "v",
      "source": [
        [
          "Color.ts",
          249,
          7
        ],
        [
          "Color.ts",
          250,
          7
        ]
      ],
      "id": 3791,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "the `v` value in LUV color mode. Same as `z`.",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "w",
      "source": [
        [
          "Pt.ts",
          75,
          7
        ],
        [
          "Pt.ts",
          76,
          7
        ]
      ],
      "id": 3924,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.w",
      "comment": "Value in the forth dimension of this Pt",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "x",
      "source": [
        [
          "Pt.ts",
          57,
          7
        ],
        [
          "Pt.ts",
          58,
          7
        ]
      ],
      "id": 3912,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.x",
      "comment": "Value in the first dimensional of this Pt",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "y",
      "source": [
        [
          "Pt.ts",
          63,
          7
        ],
        [
          "Pt.ts",
          64,
          7
        ]
      ],
      "id": 3916,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.y",
      "comment": "Value in the second dimension of this Pt",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    },
    {
      "name": "z",
      "source": [
        [
          "Pt.ts",
          69,
          7
        ],
        [
          "Pt.ts",
          70,
          7
        ]
      ],
      "id": 3920,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.z",
      "comment": "Value in the third dimension of this Pt",
      "getter": {
        "type": "number"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "n",
          "comment": "",
          "type": "number",
          "default": false
        }
      }
    }
  ],
  "methods": [
    {
      "name": "$abs",
      "source": [
        [
          "Pt.ts",
          334,
          6
        ]
      ],
      "id": 4020,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$abs",
      "signatures": [
        {
          "comment": "Get a new Pt with absolute values of this Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "$add",
      "source": [
        [
          "Pt.ts",
          200,
          6
        ]
      ],
      "id": 3972,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$add",
      "signatures": [
        {
          "comment": "Like [`Pt.add`](#link), but returns result as a new Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$ceil",
      "source": [
        [
          "Pt.ts",
          368,
          7
        ]
      ],
      "id": 4028,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$ceil",
      "signatures": [
        {
          "comment": "Get a new Pt with ceiling values of this Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "$concat",
      "source": [
        [
          "Pt.ts",
          181,
          9
        ]
      ],
      "id": 3966,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$concat",
      "signatures": [
        {
          "comment": "Concatenate this Pt with addition dimensional values and return as a new Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt,  or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$cross",
      "source": [
        [
          "Pt.ts",
          300,
          8
        ]
      ],
      "id": 4009,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$cross",
      "signatures": [
        {
          "comment": "3D Cross product of this Pt and another Pt. Return results as a new Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$cross2D",
      "source": [
        [
          "Pt.ts",
          293,
          10
        ]
      ],
      "id": 4006,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$cross2D",
      "signatures": [
        {
          "comment": "2D Cross product of this Pt and another Pt. Return results as a new Pt.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$divide",
      "source": [
        [
          "Pt.ts",
          251,
          9
        ]
      ],
      "id": 3990,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$divide",
      "signatures": [
        {
          "comment": "Like [`Pt.divide`](#link), but returns result as a new Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$floor",
      "source": [
        [
          "Pt.ts",
          351,
          8
        ]
      ],
      "id": 4024,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$floor",
      "signatures": [
        {
          "comment": "Get a new Pt with floor values of this Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "$max",
      "source": [
        [
          "Pt.ts",
          426,
          6
        ]
      ],
      "id": 4047,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$max",
      "signatures": [
        {
          "comment": "Get a new Pt that has the maximum dimensional values of this Pt and another Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$min",
      "source": [
        [
          "Pt.ts",
          412,
          6
        ]
      ],
      "id": 4044,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$min",
      "signatures": [
        {
          "comment": "Get a new Pt that has the minimum dimensional values of this Pt and another Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$multiply",
      "source": [
        [
          "Pt.ts",
          234,
          11
        ]
      ],
      "id": 3984,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$multiply",
      "signatures": [
        {
          "comment": "Like [`Pt.multiply`](#link), but returns result as a new Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$normalize",
      "source": [
        [
          "Color.ts",
          292,
          12
        ]
      ],
      "id": 3806,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Like `normalize()` but returns a new Color.",
          "returns": "Color",
          "returns_comment": "new Color\n",
          "parameters": [
            {
              "name": "toNorm",
              "comment": "a boolean value specifying whether to normalize (`true`) or revert (`false`)",
              "type": "boolean",
              "default": "true"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$project",
      "source": [
        [
          "Pt.ts",
          308,
          10
        ]
      ],
      "id": 4012,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$project",
      "signatures": [
        {
          "comment": "Calculate vector projection of this Pt on another Pt.",
          "returns": "Pt",
          "returns_comment": "the projection vector as a Pt\n",
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$round",
      "source": [
        [
          "Pt.ts",
          385,
          8
        ]
      ],
      "id": 4032,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$round",
      "signatures": [
        {
          "comment": "Get a new Pt with rounded values of this Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "$subtract",
      "source": [
        [
          "Pt.ts",
          217,
          11
        ]
      ],
      "id": 3978,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$subtract",
      "signatures": [
        {
          "comment": "Like [`Pt.subtract`](#link), but returns result as a new Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$take",
      "source": [
        [
          "Pt.ts",
          168,
          7
        ]
      ],
      "id": 3963,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$take",
      "signatures": [
        {
          "comment": "Take specific dimensional values from this Pt and create a new Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "axis",
              "comment": "a string such as \"xy\" (use Const.xy) or an array to specify indices\n",
              "type": "string | number[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$to",
      "source": [
        [
          "Pt.ts",
          117,
          5
        ]
      ],
      "id": 3935,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$to",
      "signatures": [
        {
          "comment": "Like [`Pt.to`](#link) but returns a new Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "$unit",
      "source": [
        [
          "Pt.ts",
          279,
          7
        ]
      ],
      "id": 4000,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.$unit",
      "signatures": [
        {
          "comment": "Get a new unit vector from this Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "magnitude",
              "comment": "",
              "type": "number",
              "default": "undefined"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "abs",
      "source": [
        [
          "Pt.ts",
          325,
          5
        ]
      ],
      "id": 4018,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.abs",
      "signatures": [
        {
          "comment": "Absolute values for all values in this pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "add",
      "source": [
        [
          "Pt.ts",
          190,
          5
        ]
      ],
      "id": 3969,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.add",
      "signatures": [
        {
          "comment": "Add scalar or vector values to this Pt.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "angle",
      "source": [
        [
          "Pt.ts",
          440,
          7
        ]
      ],
      "id": 4050,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.angle",
      "signatures": [
        {
          "comment": "Get angle of this Pt from origin.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "axis",
              "comment": "a string such as \"xy\" (use Const.xy) or an array to specify index for two dimensions\n",
              "type": "string | number[]",
              "default": "Const.xy"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "angleBetween",
      "source": [
        [
          "Pt.ts",
          450,
          14
        ]
      ],
      "id": 4053,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.angleBetween",
      "signatures": [
        {
          "comment": "Get the angle between this and another Pt.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "p",
              "comment": "the other Pt",
              "type": "Pt",
              "default": false
            },
            {
              "name": "axis",
              "comment": "a string such as \"xy\" (use Const.xy) or an array to specify index for two dimensions\n",
              "type": "string | number[]",
              "default": "Const.xy"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "ceil",
      "source": [
        [
          "Pt.ts",
          359,
          6
        ]
      ],
      "id": 4026,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.ceil",
      "signatures": [
        {
          "comment": "Ceiling values for all values in this Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "clone",
      "source": [
        [
          "Color.ts",
          150,
          7
        ]
      ],
      "id": 3747,
      "flags": {},
      "overrides": "Pt.clone",
      "inherits": false,
      "signatures": [
        {
          "comment": "Clone this Color.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "copyWithin",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3584,
          14
        ]
      ],
      "id": 4081,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.copyWithin",
      "signatures": [
        {
          "comment": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "target",
              "comment": "If target is negative, it is treated as length+target where length is the\nlength of the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "start",
              "comment": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.",
              "type": "number",
              "default": false
            },
            {
              "name": "end",
              "comment": "If not specified, length of the this object is used as its default value.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "divide",
      "source": [
        [
          "Pt.ts",
          241,
          8
        ]
      ],
      "id": 3987,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.divide",
      "signatures": [
        {
          "comment": "Divide this Pt over scalar or vector values (as element-wise).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "dot",
      "source": [
        [
          "Pt.ts",
          286,
          5
        ]
      ],
      "id": 4003,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.dot",
      "signatures": [
        {
          "comment": "Dot product of this Pt and another Pt.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "entries",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          444,
          11
        ]
      ],
      "id": 4249,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.entries",
      "signatures": [
        {
          "comment": "Returns an array of key, value pairs for every entry in the array",
          "returns": "IterableIterator",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "equals",
      "source": [
        [
          "Pt.ts",
          92,
          8
        ]
      ],
      "id": 3928,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.equals",
      "signatures": [
        {
          "comment": "Check if another Pt is equal to this Pt, within a threshold.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "p",
              "comment": "another Pt to compare with",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "threshold",
              "comment": "a threshold value within which the two Pts are considered equal. Default is 0.000001.\n",
              "type": "number",
              "default": "0.000001"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "every",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3594,
          9
        ]
      ],
      "id": 4086,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.every",
      "signatures": [
        {
          "comment": "Determines whether all the members of an array satisfy the specified test.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The every method calls\nthe callbackfn function for each element in array1 until the callbackfn returns false,\nor until the end of the array.",
              "type": " Fn(value:number, index:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fill",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3604,
          8
        ]
      ],
      "id": 4095,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.fill",
      "signatures": [
        {
          "comment": "Returns the this object after filling the section identified by start and end with value",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "value",
              "comment": "value to fill array section with",
              "type": "number",
              "default": false
            },
            {
              "name": "start",
              "comment": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "end",
              "comment": "index to stop filling the array at. If end is negative, it is treated as\nlength+end.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "filter",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3613,
          10
        ]
      ],
      "id": 4100,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.filter",
      "signatures": [
        {
          "comment": "Returns the elements of an array that meet the condition specified in a callback function.",
          "returns": "Float32Array",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The filter method calls\nthe callbackfn function one time for each element in the array.",
              "type": " Fn(value:number, index:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "find",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3624,
          8
        ]
      ],
      "id": 4109,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.find",
      "signatures": [
        {
          "comment": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.",
          "returns": "number | undefined",
          "returns_comment": false,
          "parameters": [
            {
              "name": "predicate",
              "comment": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.",
              "type": " Fn(value:number, index:number, obj:Float32Array)",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "findIndex",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3635,
          13
        ]
      ],
      "id": 4118,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.findIndex",
      "signatures": [
        {
          "comment": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "predicate",
              "comment": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.",
              "type": " Fn(value:number, index:number, obj:Float32Array)",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "floor",
      "source": [
        [
          "Pt.ts",
          342,
          7
        ]
      ],
      "id": 4022,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.floor",
      "signatures": [
        {
          "comment": "Floor values for all values in this Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "forEach",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3644,
          11
        ]
      ],
      "id": 4127,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.forEach",
      "signatures": [
        {
          "comment": "Performs the specified action for each element in an array.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. forEach calls the\ncallbackfn function one time for each element in the array.",
              "type": " Fn(value:number, index:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "indexOf",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3652,
          11
        ]
      ],
      "id": 4136,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.indexOf",
      "signatures": [
        {
          "comment": "Returns the index of the first occurrence of a value in an array.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "searchElement",
              "comment": "The value to locate in the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "fromIndex",
              "comment": "The array index at which to begin the search. If fromIndex is omitted, the\n search starts at index 0.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "join",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3659,
          8
        ]
      ],
      "id": 4140,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.join",
      "signatures": [
        {
          "comment": "Adds all the elements of an array separated by the specified separator string.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [
            {
              "name": "separator",
              "comment": "A string used to separate one element of an array from the next in the\nresulting String. If omitted, the array elements are separated with a comma.\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "keys",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          448,
          8
        ]
      ],
      "id": 4251,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.keys",
      "signatures": [
        {
          "comment": "Returns an list of keys in the array",
          "returns": "IterableIterator",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "lastIndexOf",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3667,
          15
        ]
      ],
      "id": 4143,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.lastIndexOf",
      "signatures": [
        {
          "comment": "Returns the index of the last occurrence of a value in an array.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "searchElement",
              "comment": "The value to locate in the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "fromIndex",
              "comment": "The array index at which to begin the search. If fromIndex is omitted, the\nsearch starts at index 0.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "magnitude",
      "source": [
        [
          "Pt.ts",
          263,
          11
        ]
      ],
      "id": 3995,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.magnitude",
      "signatures": [
        {
          "comment": "Get the distance (magnitude) of this Pt from origin.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "magnitudeSq",
      "source": [
        [
          "Pt.ts",
          257,
          13
        ]
      ],
      "id": 3993,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.magnitudeSq",
      "signatures": [
        {
          "comment": "Get the squared distance (magnitude) of this Pt from origin.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "map",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3682,
          7
        ]
      ],
      "id": 4148,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.map",
      "signatures": [
        {
          "comment": "Calls a defined callback function on each element of an array, and returns an array that\ncontains the results.",
          "returns": "Float32Array",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The map method calls the\ncallbackfn function one time for each element in the array.",
              "type": " Fn(value:number, index:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "maxValue",
      "source": [
        [
          "Pt.ts",
          403,
          10
        ]
      ],
      "id": 4039,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.maxValue",
      "signatures": [
        {
          "comment": "Find the maximum value across all dimensions in this Pt.",
          "returns": "{ index:`number`, value:`number` }",
          "returns_comment": "an object with `value` and `index` which returns the maximum value and its dimensional index\n",
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "minValue",
      "source": [
        [
          "Pt.ts",
          394,
          10
        ]
      ],
      "id": 4034,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.minValue",
      "signatures": [
        {
          "comment": "Find the minimum value across all dimensions in this Pt.",
          "returns": "{ index:`number`, value:`number` }",
          "returns_comment": "an object with `value` and `index` which returns the minimum value and its dimensional index\n",
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "multiply",
      "source": [
        [
          "Pt.ts",
          224,
          10
        ]
      ],
      "id": 3981,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.multiply",
      "signatures": [
        {
          "comment": "Multiply scalar or vector values (as element-wise) with this Pt.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "normalize",
      "source": [
        [
          "Color.ts",
          270,
          11
        ]
      ],
      "id": 3803,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Normalize the color values to between 0 to 1, or revert it back to the min/max values in current color mode.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "toNorm",
              "comment": "a boolean value specifying whether to normalize (`true`) or revert (`false`)\n",
              "type": "boolean",
              "default": "true"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "op",
      "source": [
        [
          "Pt.ts",
          141,
          4
        ]
      ],
      "id": 3943,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.op",
      "signatures": [
        {
          "comment": "Create an operation using this Pt, passing this Pt into a custom function's first parameter. See the [Op guide](../guide/Op-0400.html) for details.",
          "returns": " Fn(rest:any[])",
          "returns_comment": "a resulting function that takes other parameters required in `fn`\n",
          "parameters": [
            {
              "name": "fn",
              "comment": "any function that takes a Pt as its first parameter",
              "type": " Fn(p1:PtLike, rest:any[])",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`let myOp = pt.op( fn ); let result = myOp( [1,2,3] );`"
            }
          ]
        }
      ]
    },
    {
      "name": "ops",
      "source": [
        [
          "Pt.ts",
          155,
          5
        ]
      ],
      "id": 3953,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.ops",
      "signatures": [
        {
          "comment": "This combines a series of operations into an array. See the [Op guide](../guide/Op-0400.html) for details.",
          "returns": " Fn(rest:any[])",
          "returns_comment": "an array of resulting functions\n",
          "parameters": [
            {
              "name": "fns",
              "comment": "an array of functions for `op`",
              "type": " Fn(p1:PtLike, rest:any[])",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`let myOps = pt.ops([fn1, fn2, fn3]); let results = myOps.map( (op) => op([1,2,3]) );`"
            }
          ]
        }
      ]
    },
    {
      "name": "projectScalar",
      "source": [
        [
          "Pt.ts",
          317,
          15
        ]
      ],
      "id": 4015,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.projectScalar",
      "signatures": [
        {
          "comment": "Calculate scalar projection.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reduce",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3694,
          10
        ],
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3695,
          10
        ],
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3707,
          10
        ]
      ],
      "id": 4157,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.reduce",
      "signatures": [
        {
          "comment": "Calls the specified callback function for all the elements in an array. The return value of\nthe callback function is the accumulated result, and is provided as an argument in the next\ncall to the callback function.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to four arguments. The reduce method calls the\ncallbackfn function one time for each element in the array.",
              "type": " Fn(previousValue:number, currentValue:number, currentIndex:number, array:Float32Array)",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "",
              "type": " Fn(previousValue:number, currentValue:number, currentIndex:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "initialValue",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "Calls the specified callback function for all the elements in an array. The return value of\nthe callback function is the accumulated result, and is provided as an argument in the next\ncall to the callback function.",
          "returns": "U",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to four arguments. The reduce method calls the\ncallbackfn function one time for each element in the array.",
              "type": " Fn(previousValue:U, currentValue:number, currentIndex:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "initialValue",
              "comment": "If initialValue is specified, it is used as the initial value to start\nthe accumulation. The first call to the callbackfn function provides this value as an argument\ninstead of an array value.\n",
              "type": "U",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reduceRight",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3719,
          15
        ],
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3720,
          15
        ],
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3732,
          15
        ]
      ],
      "id": 4185,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.reduceRight",
      "signatures": [
        {
          "comment": "Calls the specified callback function for all the elements in an array, in descending order.\nThe return value of the callback function is the accumulated result, and is provided as an\nargument in the next call to the callback function.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to four arguments. The reduceRight method calls\nthe callbackfn function one time for each element in the array.",
              "type": " Fn(previousValue:number, currentValue:number, currentIndex:number, array:Float32Array)",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "",
              "type": " Fn(previousValue:number, currentValue:number, currentIndex:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "initialValue",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        },
        {
          "comment": "Calls the specified callback function for all the elements in an array, in descending order.\nThe return value of the callback function is the accumulated result, and is provided as an\nargument in the next call to the callback function.",
          "returns": "U",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to four arguments. The reduceRight method calls\nthe callbackfn function one time for each element in the array.",
              "type": " Fn(previousValue:U, currentValue:number, currentIndex:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "initialValue",
              "comment": "If initialValue is specified, it is used as the initial value to start\nthe accumulation. The first call to the callbackfn function provides this value as an argument\ninstead of an array value.\n",
              "type": "U",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reflect2D",
      "source": [
        [
          "Pt.ts",
          495,
          11
        ]
      ],
      "id": 4071,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.reflect2D",
      "signatures": [
        {
          "comment": "Reflect this Pt along a 2D line.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "line",
              "comment": "a Group of 2 Pts that defines a line for reflection",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional axis such as \"yz\" to define a 2D plane of reflection\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reverse",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3737,
          11
        ]
      ],
      "id": 4213,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.reverse",
      "signatures": [
        {
          "comment": "Reverses the elements in an Array.",
          "returns": "Float32Array",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "rotate2D",
      "source": [
        [
          "Pt.ts",
          472,
          10
        ]
      ],
      "id": 4061,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.rotate2D",
      "signatures": [
        {
          "comment": "Rotate this Pt from origin or from an anchor point in 2D.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "angle",
              "comment": "rotate angle",
              "type": "number",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to scale from",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional string such as \"yz\" to specify a 2D plane\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "round",
      "source": [
        [
          "Pt.ts",
          376,
          7
        ]
      ],
      "id": 4030,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.round",
      "signatures": [
        {
          "comment": "Rounded values for all values in this Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "scale",
      "source": [
        [
          "Pt.ts",
          460,
          7
        ]
      ],
      "id": 4057,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.scale",
      "signatures": [
        {
          "comment": "Scale this Pt from origin or from an anchor point.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "scale",
              "comment": "scale ratio",
              "type": "number | number[] | PtLike",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to scale from\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "set",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3744,
          7
        ]
      ],
      "id": 4215,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.set",
      "signatures": [
        {
          "comment": "Sets a value or an array of values.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "array",
              "comment": "A typed or untyped array of values to set.",
              "type": "ArrayLike",
              "default": false
            },
            {
              "name": "offset",
              "comment": "The index in the current array at which the values are to be written.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "shear2D",
      "source": [
        [
          "Pt.ts",
          484,
          9
        ]
      ],
      "id": 4066,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.shear2D",
      "signatures": [
        {
          "comment": "Shear this Pt from origin or from an anchor point in 2D.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "scale",
              "comment": "",
              "type": "number | number[] | PtLike",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to scale from",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional string such as \"yz\" to specify a 2D plane\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "slice",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3751,
          9
        ]
      ],
      "id": 4219,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.slice",
      "signatures": [
        {
          "comment": "Returns a section of an array.",
          "returns": "Float32Array",
          "returns_comment": false,
          "parameters": [
            {
              "name": "start",
              "comment": "The beginning of the specified portion of the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "end",
              "comment": "The end of the specified portion of the array.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "some",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3761,
          8
        ]
      ],
      "id": 4223,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.some",
      "signatures": [
        {
          "comment": "Determines whether the specified callback function returns true for any element of an array.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "callbackfn",
              "comment": "A function that accepts up to three arguments. The some method calls the\ncallbackfn function for each element in array1 until the callbackfn returns true, or until\nthe end of the array.",
              "type": " Fn(value:number, index:number, array:Float32Array)",
              "default": false
            },
            {
              "name": "thisArg",
              "comment": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value.\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "sort",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3768,
          8
        ]
      ],
      "id": 4232,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.sort",
      "signatures": [
        {
          "comment": "Sorts an array.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "compareFn",
              "comment": "The name of the function used to determine the order of the elements. If\nomitted, the elements are sorted in ascending, ASCII character order.\n",
              "type": " Fn(a:number, b:number)",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "subarray",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3776,
          12
        ]
      ],
      "id": 4239,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.subarray",
      "signatures": [
        {
          "comment": "Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\nat begin, inclusive, up to end, exclusive.",
          "returns": "Float32Array",
          "returns_comment": false,
          "parameters": [
            {
              "name": "begin",
              "comment": "The index of the beginning of the array.",
              "type": "number",
              "default": false
            },
            {
              "name": "end",
              "comment": "The index of the end of the array.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "subtract",
      "source": [
        [
          "Pt.ts",
          207,
          10
        ]
      ],
      "id": 3975,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.subtract",
      "signatures": [
        {
          "comment": "Subtract scalar or vector values from this Pt.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "to",
      "source": [
        [
          "Pt.ts",
          104,
          4
        ]
      ],
      "id": 3932,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.to",
      "signatures": [
        {
          "comment": "Update the values of this Pt.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "can be either a list of numbers, an array, a Pt, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toAngle",
      "source": [
        [
          "Pt.ts",
          128,
          9
        ]
      ],
      "id": 3938,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.toAngle",
      "signatures": [
        {
          "comment": "Update the values of this Pt to point at a specific angle.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "radian",
              "comment": "target angle in radian",
              "type": "number",
              "default": false
            },
            {
              "name": "magnitude",
              "comment": "Optional magnitude if known. If not provided, it'll calculate and use this Pt's magnitude.",
              "type": "number",
              "default": false
            },
            {
              "name": "anchorFromPt",
              "comment": "If `true`, translate to new position from current position. Default is `false` which update the position from origin (0,0);\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toArray",
      "source": [
        [
          "Pt.ts",
          512,
          9
        ]
      ],
      "id": 4075,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.toArray",
      "signatures": [
        {
          "comment": "Convert this Pt to a javascript Array.",
          "returns": "number[]",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "toLocaleString",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3781,
          18
        ]
      ],
      "id": 4243,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.toLocaleString",
      "signatures": [
        {
          "comment": "Converts a number to a string by using the current locale.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "toMode",
      "source": [
        [
          "Color.ts",
          161,
          8
        ]
      ],
      "id": 3749,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Convert this color from current color space to another color space.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "mode",
              "comment": "a ColorType string: \"rgb\" \"hsl\" \"hsb\" \"lab\" \"lch\" \"luv\" \"xyz\";",
              "type": "ColorType",
              "default": false
            },
            {
              "name": "convert",
              "comment": "if `true`, convert this Color to the new color space specified in `mode`. Default is `false`, which only sets the color mode without converting color values.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toString",
      "source": [
        [
          "Color.ts",
          299,
          10
        ]
      ],
      "id": 3809,
      "flags": {},
      "overrides": "Pt.toString",
      "inherits": false,
      "signatures": [
        {
          "comment": "Convert this Color to a string. It can be used to get a hex or rgb string for use in rendering.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [
            {
              "name": "format",
              "comment": "\"hex\", \"rgb\", \"rgba\", or \"mode\" which means using current color mode label. Default is \"mode\".\n",
              "type": "rgb | hex | rgba | mode",
              "default": "\"mode\""
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "unit",
      "source": [
        [
          "Pt.ts",
          270,
          6
        ]
      ],
      "id": 3997,
      "flags": {},
      "overrides": false,
      "inherits": "Pt.unit",
      "signatures": [
        {
          "comment": "Convert to a unit vector, which is a normalized vector whose magnitude equals to 1.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "magnitude",
              "comment": "Optional: if the magnitude is known, pass it as a parameter to avoid duplicate calculation.\n",
              "type": "number",
              "default": "undefined"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "values",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          452,
          10
        ]
      ],
      "id": 4253,
      "flags": {},
      "overrides": false,
      "inherits": "Float32Array.values",
      "signatures": [
        {
          "comment": "Returns an list of values in the array",
          "returns": "IterableIterator",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "HSBtoRGB",
      "source": [
        [
          "Color.ts",
          433,
          17
        ]
      ],
      "id": 3827,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert HSB to RGB.",
          "returns": "Color",
          "returns_comment": "a new RGB Color\n",
          "parameters": [
            {
              "name": "hsb",
              "comment": "a HSB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "HSLtoRGB",
      "source": [
        [
          "Color.ts",
          362,
          17
        ]
      ],
      "id": 3817,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert HSL to RGB.",
          "returns": "Color",
          "returns_comment": "a new RGB Color\n",
          "parameters": [
            {
              "name": "hsl",
              "comment": "a HSL Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "LABtoLCH",
      "source": [
        [
          "Color.ts",
          710,
          17
        ]
      ],
      "id": 3892,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert LAB to LCH.",
          "returns": "Color",
          "returns_comment": "a new LCH Color\n",
          "parameters": [
            {
              "name": "lab",
              "comment": "a LAB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "LABtoRGB",
      "source": [
        [
          "Color.ts",
          479,
          17
        ]
      ],
      "id": 3837,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert LAB to RGB.",
          "returns": "Color",
          "returns_comment": "a new RGB Color\n",
          "parameters": [
            {
              "name": "lab",
              "comment": "a LAB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "LABtoXYZ",
      "source": [
        [
          "Color.ts",
          623,
          17
        ]
      ],
      "id": 3877,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert LAB to XYZ.",
          "returns": "Color",
          "returns_comment": "a new XYZ Color\n",
          "parameters": [
            {
              "name": "lab",
              "comment": "a LAB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "LCHtoLAB",
      "source": [
        [
          "Color.ts",
          726,
          17
        ]
      ],
      "id": 3897,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert LCH to LAB.",
          "returns": "Color",
          "returns_comment": "a new LAB Color\n",
          "parameters": [
            {
              "name": "lch",
              "comment": "a LCH Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "LCHtoRGB",
      "source": [
        [
          "Color.ts",
          505,
          17
        ]
      ],
      "id": 3847,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert LCH to RGB.",
          "returns": "Color",
          "returns_comment": "a new RGB Color\n",
          "parameters": [
            {
              "name": "lch",
              "comment": "a LCH Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "LUVtoRGB",
      "source": [
        [
          "Color.ts",
          531,
          17
        ]
      ],
      "id": 3857,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert LUV to RGB.",
          "returns": "Color",
          "returns_comment": "a new RGB Color\n",
          "parameters": [
            {
              "name": "luv",
              "comment": "",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "LUVtoXYZ",
      "source": [
        [
          "Color.ts",
          683,
          17
        ]
      ],
      "id": 3887,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert LUV to XYZ.",
          "returns": "Color",
          "returns_comment": "a new XYZ Color\n",
          "parameters": [
            {
              "name": "luv",
              "comment": "a LUV Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "RGBtoHSB",
      "source": [
        [
          "Color.ts",
          402,
          17
        ]
      ],
      "id": 3822,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert RGB to HSB.",
          "returns": "Color",
          "returns_comment": "a new HSB Color\n",
          "parameters": [
            {
              "name": "rgb",
              "comment": "a RGB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "RGBtoHSL",
      "source": [
        [
          "Color.ts",
          326,
          17
        ]
      ],
      "id": 3812,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert RGB to HSL.",
          "returns": "Color",
          "returns_comment": "a new HSL Color\n",
          "parameters": [
            {
              "name": "rgb",
              "comment": "a RGB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "RGBtoLAB",
      "source": [
        [
          "Color.ts",
          466,
          17
        ]
      ],
      "id": 3832,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert RGB to LAB.",
          "returns": "Color",
          "returns_comment": "a new LAB Color\n",
          "parameters": [
            {
              "name": "rgb",
              "comment": "a RGB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "RGBtoLCH",
      "source": [
        [
          "Color.ts",
          492,
          17
        ]
      ],
      "id": 3842,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert RGB to LCH.",
          "returns": "Color",
          "returns_comment": "a new LCH Color\n",
          "parameters": [
            {
              "name": "rgb",
              "comment": "a RGB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "RGBtoLUV",
      "source": [
        [
          "Color.ts",
          518,
          17
        ]
      ],
      "id": 3852,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert RGB to LUV.",
          "returns": "Color",
          "returns_comment": "a new LUV Color\n",
          "parameters": [
            {
              "name": "rgb",
              "comment": "a RGB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "RGBtoXYZ",
      "source": [
        [
          "Color.ts",
          544,
          17
        ]
      ],
      "id": 3862,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert RGB to XYZ.",
          "returns": "Color",
          "returns_comment": "a new XYZ Color\n",
          "parameters": [
            {
              "name": "rgb",
              "comment": "a RGB Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "XYZtoLAB",
      "source": [
        [
          "Color.ts",
          598,
          17
        ]
      ],
      "id": 3872,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert XYZ to LAB.",
          "returns": "Color",
          "returns_comment": "a new LAB Color\n",
          "parameters": [
            {
              "name": "xyz",
              "comment": "a XYZ Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "XYZtoLUV",
      "source": [
        [
          "Color.ts",
          658,
          17
        ]
      ],
      "id": 3882,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert XYZ to LUV.",
          "returns": "Color",
          "returns_comment": "a new LUV Color\n",
          "parameters": [
            {
              "name": "xyz",
              "comment": "a XYZ Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "XYZtoRGB",
      "source": [
        [
          "Color.ts",
          570,
          17
        ]
      ],
      "id": 3867,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to convert XYZ to RGB.",
          "returns": "Color",
          "returns_comment": "a new RGB Color\n",
          "parameters": [
            {
              "name": "xyz",
              "comment": "a XYZ Color",
              "type": "Color",
              "default": false
            },
            {
              "name": "normalizedInput",
              "comment": "a boolean specifying whether input color is normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "normalizedOutput",
              "comment": "a boolean specifying whether output color shoud be normalized. Default is not normalized: `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "from",
      "source": [
        [
          "Color.ts",
          46,
          13
        ]
      ],
      "id": 3711,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a Color object with 4 default dimensional values (1,1,1,1).",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromHex",
      "source": [
        [
          "Color.ts",
          60,
          16
        ]
      ],
      "id": 3714,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Convert a rgb hex string like `\"#FF0000\"` or `\"#F00\"` to a Color object.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "hex",
              "comment": "a hex string, with optional '#' prefix\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "hsb",
      "source": [
        [
          "Color.ts",
          96,
          12
        ]
      ],
      "id": 3723,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create HSB Color. HSB color ranges are (0...360, 0...1, 0...1) respectively. You may use [`Color.normalize`](#link) to convert the ranges to 0...1.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties.\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "hsl",
      "source": [
        [
          "Color.ts",
          90,
          12
        ]
      ],
      "id": 3720,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create HSL Color. HSL color ranges are (0...360, 0...1, 0...1) respectively. You may use [`Color.normalize`](#link) to convert the ranges to 0...1.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties.\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "lab",
      "source": [
        [
          "Color.ts",
          102,
          12
        ]
      ],
      "id": 3726,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create LAB Color. LAB color ranges are (0...100, -128...127, -128...127) respectively. You may use [`Color.normalize`](#link) to convert the ranges to 0...1.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties.\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "lch",
      "source": [
        [
          "Color.ts",
          108,
          12
        ]
      ],
      "id": 3729,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create LCH Color. LCH color ranges are (0...100, 0...100, 0...360) respectively. You may use [`Color.normalize`](#link) to convert the ranges to 0...1.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties.\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "luv",
      "source": [
        [
          "Color.ts",
          114,
          12
        ]
      ],
      "id": 3732,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create LUV Color. LUV color ranges are (0...100, -134...220, -140...122) respectively. You may use [`Color.normalize`](#link) to convert the ranges to 0...1.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties.\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "make",
      "source": [
        [
          "Pt.ts",
          37,
          13
        ]
      ],
      "id": 3903,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": "Pt.make",
      "signatures": [
        {
          "comment": "Create an n-dimensional Pt with either default value or random values.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "dimensions",
              "comment": "number of dimensions",
              "type": "number",
              "default": false
            },
            {
              "name": "defaultValue",
              "comment": "optional default value to fill the dimensions",
              "type": "number",
              "default": "0"
            },
            {
              "name": "randomize",
              "comment": "if `true`, randomize the value between 0 to default value\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "maxValues",
      "source": [
        [
          "Color.ts",
          128,
          18
        ]
      ],
      "id": 3738,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a Color object whose values are the maximum of its mode.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "mode",
              "comment": "a mode string such as \"rgb\" or \"lab\"",
              "type": "string",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "Color.maxValue(\"rgb\") will return a rgb Color object with values (255,255,255)\n"
            }
          ]
        }
      ]
    },
    {
      "name": "rgb",
      "source": [
        [
          "Color.ts",
          84,
          12
        ]
      ],
      "id": 3717,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create RGB Color. RGB color ranges are (0...255, 0...255, 0...255) respectively. You may use [`Color.normalize`](#link) to convert the ranges to 0...1.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties.\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "xyz",
      "source": [
        [
          "Color.ts",
          120,
          12
        ]
      ],
      "id": 3735,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create XYZ Color. XYZ color ranges are (0...100, 0...100, 0...100) respectively. You may use [`Color.normalize`](#link) to convert the ranges to 0...1.",
          "returns": "Color",
          "returns_comment": false,
          "parameters": [
            {
              "name": "args",
              "comment": "Pt-like parameters which can be a list of numeric parameters, an array of numbers, or an object with {x,y,z,w} properties.\n",
              "type": "any[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [
    {
      "name": "BYTES_PER_ELEMENT",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3558,
          30
        ]
      ],
      "id": 4077,
      "flags": {},
      "type": "BYTES_PER_ELEMENT",
      "overrides": false,
      "inherits": "Float32Array.BYTES_PER_ELEMENT",
      "comment": "The size in bytes of each element in the array."
    },
    {
      "name": "buffer",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3563,
          19
        ]
      ],
      "id": 4078,
      "flags": {},
      "type": "buffer",
      "overrides": false,
      "inherits": "Float32Array.buffer",
      "comment": "The ArrayBuffer instance referenced by the array."
    },
    {
      "name": "byteLength",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3568,
          23
        ]
      ],
      "id": 4079,
      "flags": {},
      "type": "byteLength",
      "overrides": false,
      "inherits": "Float32Array.byteLength",
      "comment": "The length in bytes of the array."
    },
    {
      "name": "byteOffset",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3573,
          23
        ]
      ],
      "id": 4080,
      "flags": {},
      "type": "byteOffset",
      "overrides": false,
      "inherits": "Float32Array.byteOffset",
      "comment": "The offset in bytes of the array."
    },
    {
      "name": "length",
      "source": [
        [
          "/Users/tibo/Smplrspace/oss/pts/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
          3672,
          19
        ]
      ],
      "id": 4147,
      "flags": {},
      "type": "length",
      "overrides": false,
      "inherits": "Float32Array.length",
      "comment": "The length of the array."
    },
    {
      "name": "D65",
      "source": [
        [
          "Color.ts",
          15,
          20
        ]
      ],
      "id": 3697,
      "flags": {
        "isPrivate": true,
        "isStatic": true
      },
      "type": "D65",
      "overrides": false,
      "inherits": false,
      "comment": ""
    }
  ],
  "flags": {},
  "extends": [
    "Pt"
  ],
  "implements": [
    "IPt",
    "Iterable"
  ]
}