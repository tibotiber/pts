{
  "name": "HTMLForm",
  "source": [
    [
      "Dom.ts",
      361,
      21
    ]
  ],
  "kind": "Class",
  "id": 5447,
  "comment": "**[Experimental]** HTMLForm is an implementation of abstract class [`VisualForm`](#link). It provide methods to express Pts on [`HTMLSpace`](#link). Note that this is currently experimental and may change in future.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "Dom.ts",
          396,
          35
        ]
      ],
      "id": 5475,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a new `HTMLForm`. Alternatively, you can use [`HTMLSpace.getForm`](#link) function to get an instance of HTMLForm.",
          "returns": "HTMLForm",
          "returns_comment": false,
          "parameters": [
            {
              "name": "space",
              "comment": "the space to use\n",
              "type": "HTMLSpace",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "currentFont",
      "source": [
        [
          "Form.ts",
          65,
          17
        ]
      ],
      "id": 5611,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.currentFont",
      "comment": "Get the current font in use in this form.",
      "getter": {
        "type": "Font"
      },
      "setter": false
    },
    {
      "name": "filled",
      "source": [
        [
          "Form.ts",
          49,
          12
        ],
        [
          "Form.ts",
          50,
          12
        ]
      ],
      "id": 5601,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.filled",
      "comment": "Check whether this form currently has fill style.",
      "getter": {
        "type": "boolean"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "b",
          "comment": "",
          "type": "boolean",
          "default": false
        }
      }
    },
    {
      "name": "ready",
      "source": [
        [
          "Form.ts",
          18,
          11
        ]
      ],
      "id": 5647,
      "flags": {},
      "overrides": false,
      "inherits": "Form.ready",
      "comment": "get whether the Form has received the Space's rendering context.",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "space",
      "source": [
        [
          "Dom.ts",
          417,
          11
        ]
      ],
      "id": 5478,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the corresponding space for this form",
      "getter": {
        "type": "HTMLSpace"
      },
      "setter": false
    },
    {
      "name": "stroked",
      "source": [
        [
          "Form.ts",
          57,
          13
        ],
        [
          "Form.ts",
          58,
          13
        ]
      ],
      "id": 5606,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.stroked",
      "comment": "Check whether this form currently has stroke style.",
      "getter": {
        "type": "boolean"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "b",
          "comment": "",
          "type": "boolean",
          "default": false
        }
      }
    }
  ],
  "methods": [
    {
      "name": "alpha",
      "source": [
        [
          "Dom.ts",
          437,
          7
        ]
      ],
      "id": 5485,
      "flags": {},
      "overrides": "VisualForm.alpha",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current alpha value.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "a",
              "comment": "alpha value between 0 and 1\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.alpha(0.6)`"
            }
          ]
        }
      ]
    },
    {
      "name": "arc",
      "source": [
        [
          "Dom.ts",
          817,
          5
        ]
      ],
      "id": 5587,
      "flags": {},
      "overrides": "VisualForm.arc",
      "inherits": false,
      "signatures": [
        {
          "comment": "Arc is not implemented in HTMLForm.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "startAngle",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "endAngle",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "cc",
              "comment": "",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circle",
      "source": [
        [
          "Dom.ts",
          709,
          8
        ]
      ],
      "id": 5556,
      "flags": {},
      "overrides": "VisualForm.circle",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a circle.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "usually a Group of 2 Pts, but it can also take an array of two numeric arrays [ [position], [size] ]",
              "type": "GroupLike | number[][]",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "see",
              "text": "[`Circle.fromCenter`](./?p=Op_Circle#function_fromCenter)\n"
            }
          ]
        }
      ]
    },
    {
      "name": "circles",
      "source": [
        [
          "Form.ts",
          173,
          9
        ]
      ],
      "id": 5632,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.circles",
      "signatures": [
        {
          "comment": "Draw multiple circles at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "an array of Groups that defines multiple circles\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "cls",
      "source": [
        [
          "Dom.ts",
          496,
          5
        ]
      ],
      "id": 5500,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Add custom class to the created element.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "custom class name or `false` to reset it",
              "type": "string | boolean",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.fill(\"#f00\").cls(\"myClass\").rects(r)` `form.cls(false).circles(c)`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "fill",
      "source": [
        [
          "Dom.ts",
          448,
          6
        ]
      ],
      "id": 5488,
      "flags": {},
      "overrides": "VisualForm.fill",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current fill style. Provide a valid color string or `false` to specify no fill color.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "fill color\n",
              "type": "string | boolean",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.fill(\"#F90\")`, `form.fill(\"rgba(0,0,0,.5\")`, `form.fill(false)`"
            }
          ]
        }
      ]
    },
    {
      "name": "fillOnly",
      "source": [
        [
          "Form.ts",
          105,
          10
        ]
      ],
      "id": 5618,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.fillOnly",
      "signatures": [
        {
          "comment": "Set current fill style and remove stroke style. (not implemented here  -- to be implemented in subclasses).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "fill color as string or `false` to specify transparent.\n",
              "type": "string | boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fillText",
      "source": [
        [
          "Dom.ts",
          485,
          10
        ]
      ],
      "id": 5497,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current text color style. Provide a valid color string.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "fill color\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.fill(\"#F90\")`, `form.fill(\"rgba(0,0,0,.5\")`, `form.fill(false)`"
            }
          ]
        }
      ]
    },
    {
      "name": "font",
      "source": [
        [
          "Dom.ts",
          515,
          6
        ]
      ],
      "id": 5503,
      "flags": {},
      "overrides": "VisualForm.font",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set the current font.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "sizeOrFont",
              "comment": "either a number to specify font-size, or a `Font` object to specify all font properties",
              "type": "number | Font",
              "default": false
            },
            {
              "name": "weight",
              "comment": "Optional font-weight string such as \"bold\"",
              "type": "string",
              "default": false
            },
            {
              "name": "style",
              "comment": "Optional font-style string such as \"italic\"",
              "type": "string",
              "default": false
            },
            {
              "name": "lineHeight",
              "comment": "Optional line-height number suchas 1.5",
              "type": "number",
              "default": false
            },
            {
              "name": "family",
              "comment": "Optional font-family such as \"Helvetica, sans-serif\"",
              "type": "string",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.font( myFont )`, `form.font(14, \"bold\")`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "line",
      "source": [
        [
          "Dom.ts",
          826,
          6
        ]
      ],
      "id": 5594,
      "flags": {},
      "overrides": "VisualForm.line",
      "inherits": false,
      "signatures": [
        {
          "comment": "Line is not implemented in HTMLForm.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "",
              "type": "GroupLike | number[][]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "lines",
      "source": [
        [
          "Form.ts",
          209,
          7
        ]
      ],
      "id": 5638,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.lines",
      "signatures": [
        {
          "comment": "Draw multiple lines at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "log",
      "source": [
        [
          "Dom.ts",
          808,
          5
        ]
      ],
      "id": 5584,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A convenient way to draw some text on canvas for logging or debugging. It'll be draw on the top-left of the canvas as an overlay.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "txt",
              "comment": "text\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "nextID",
      "source": [
        [
          "Dom.ts",
          575,
          8
        ]
      ],
      "id": 5519,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get next available id in the current group.",
          "returns": "string",
          "returns_comment": "an id string\n",
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "point",
      "source": [
        [
          "Dom.ts",
          681,
          7
        ]
      ],
      "id": 5546,
      "flags": {},
      "overrides": "VisualForm.point",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draws a point.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": "5"
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.",
              "type": "string",
              "default": "\"square\""
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.point( p )`, `form.point( p, 10, \"circle\" )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "points",
      "source": [
        [
          "Form.ts",
          151,
          8
        ]
      ],
      "id": 5627,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.points",
      "signatures": [
        {
          "comment": "Draw multiple points at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "an array of Pt or an array of number arrays",
              "type": "GroupLike | number[][]",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": false
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "polygon",
      "source": [
        [
          "Dom.ts",
          836,
          9
        ]
      ],
      "id": 5597,
      "flags": {},
      "overrides": "VisualForm.polygon",
      "inherits": false,
      "signatures": [
        {
          "comment": "Polygon is not implemented in HTMLForm.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "\n",
              "type": "GroupLike | number[][]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "polygons",
      "source": [
        [
          "Form.ts",
          225,
          10
        ]
      ],
      "id": 5641,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.polygons",
      "signatures": [
        {
          "comment": "Draw multiple polygons at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rect",
      "source": [
        [
          "Dom.ts",
          764,
          6
        ]
      ],
      "id": 5572,
      "flags": {},
      "overrides": "VisualForm.rect",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a rectangle.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "usually a Group of 2 Pts specifying the top-left and bottom-right positions. Alternatively it can be an array of numeric arrays.\n",
              "type": "number[][] | Pt[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rects",
      "source": [
        [
          "Form.ts",
          242,
          7
        ]
      ],
      "id": 5644,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.rects",
      "signatures": [
        {
          "comment": "Draw multiple rectangles at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reset",
      "source": [
        [
          "Dom.ts",
          536,
          7
        ]
      ],
      "id": 5510,
      "flags": {},
      "overrides": "VisualForm.reset",
      "inherits": false,
      "signatures": [
        {
          "comment": "Reset the context's common styles to this form's styles. This supports using multiple forms on the same canvas context.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "scope",
      "source": [
        [
          "Dom.ts",
          565,
          7
        ]
      ],
      "id": 5516,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set the current group scope to an item added into space, in order to keep track of any point, circle, etc created within it. The item must have an `animateID` property, so that elements created within the item will have generated IDs like \"item-{animateID}-{count}\".",
          "returns": "object",
          "returns_comment": "this form's context\n",
          "parameters": [
            {
              "name": "item",
              "comment": "a \"player\" item that's added to space (see `space.add(...)`) and has an `animateID` property",
              "type": "IPlayer",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "square",
      "source": [
        [
          "Dom.ts",
          737,
          8
        ]
      ],
      "id": 5564,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a square, given a center and its half-size.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "center Pt",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "halfsize",
              "comment": "half-size\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "squares",
      "source": [
        [
          "Form.ts",
          182,
          9
        ]
      ],
      "id": 5635,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.squares",
      "signatures": [
        {
          "comment": "Draw multiple squares at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "an array of Groups that defines multiple circles\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "stroke",
      "source": [
        [
          "Dom.ts",
          467,
          8
        ]
      ],
      "id": 5491,
      "flags": {},
      "overrides": "VisualForm.stroke",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current stroke style. Provide a valid color string or `false` to specify no stroke color.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "stroke color which can be as color, gradient, or pattern. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle))",
              "type": "string | boolean",
              "default": false
            },
            {
              "name": "width",
              "comment": "Optional value (can be floating point) to set line width",
              "type": "number",
              "default": false
            },
            {
              "name": "linejoin",
              "comment": "not implemented in HTMLForm",
              "type": "string",
              "default": false
            },
            {
              "name": "linecap",
              "comment": "not implemented in HTMLForm\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.stroke(\"#F90\")`, `form.stroke(\"rgba(0,0,0,.5\")`, `form.stroke(false)`, `form.stroke(\"#000\", 0.5, 'round', 'square')`"
            }
          ]
        }
      ]
    },
    {
      "name": "strokeOnly",
      "source": [
        [
          "Form.ts",
          130,
          12
        ]
      ],
      "id": 5621,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.strokeOnly",
      "signatures": [
        {
          "comment": "Set stroke style and remove fill style. (not implemented here  -- to be implemented in subclasses).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "stroke color as string or `false` to specify transparent.",
              "type": "string | boolean",
              "default": false
            },
            {
              "name": "width",
              "comment": "Optional value (can be floating point) to set line width",
              "type": "number",
              "default": false
            },
            {
              "name": "linejoin",
              "comment": "Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".",
              "type": "string",
              "default": false
            },
            {
              "name": "linecap",
              "comment": "Optional string to set line cap style. Can be \"butt\", \"round\", or \"square\".\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "styleTo",
      "source": [
        [
          "Dom.ts",
          426,
          19
        ]
      ],
      "id": 5480,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Usually not used directly. This updates a style in `_ctx` context or throw an Error if the style doesn't exist.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "k",
              "comment": "style key",
              "type": "any",
              "default": false
            },
            {
              "name": "v",
              "comment": "style value",
              "type": "any",
              "default": false
            },
            {
              "name": "unit",
              "comment": "Optional unit like 'px' to append to value\n",
              "type": "string",
              "default": "\"\""
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "text",
      "source": [
        [
          "Dom.ts",
          797,
          6
        ]
      ],
      "id": 5580,
      "flags": {},
      "overrides": "VisualForm.text",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw text on canvas.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "txt",
              "comment": "",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "updateScope",
      "source": [
        [
          "Dom.ts",
          551,
          13
        ]
      ],
      "id": 5512,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set this form's group scope by an ID, and optionally define the group's parent element. A group scope keeps track of elements by their generated IDs, and updates their properties as needed. See also `scope()`.",
          "returns": "object",
          "returns_comment": "this form's context\n",
          "parameters": [
            {
              "name": "group_id",
              "comment": "a string to use as prefix for the group's id. For example, group_id \"hello\" will create elements with id like \"hello-1\", \"hello-2\", etc",
              "type": "string",
              "default": false
            },
            {
              "name": "group",
              "comment": "Optional DOM element to define this group's parent element",
              "type": "Element",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circle",
      "source": [
        [
          "Dom.ts",
          695,
          15
        ]
      ],
      "id": 5551,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a circle.",
          "returns": "Element",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of HTMLForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position of the circle",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the circle\n",
              "type": "number",
              "default": "10"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "getID",
      "source": [
        [
          "Dom.ts",
          586,
          14
        ]
      ],
      "id": 5521,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to generate an ID string based on a context object.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object for an HTMLForm\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "point",
      "source": [
        [
          "Dom.ts",
          665,
          14
        ]
      ],
      "id": 5540,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draws a point.",
          "returns": "Element",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of HTMLForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "a Pt object or numeric array",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": "5"
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.",
              "type": "string",
              "default": "\"square\""
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`HTMLForm.point( p )`, `HTMLForm.point( p, 10, \"circle\" )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "rect",
      "source": [
        [
          "Dom.ts",
          749,
          13
        ]
      ],
      "id": 5568,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a rectangle.",
          "returns": "Element",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of HTMLForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pts",
              "comment": "usually a Group of 2 Pts specifying the top-left and bottom-right positions. Alternatively it can be an array of numeric arrays.\n",
              "type": "GroupLike | number[][]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rectStyle",
      "source": [
        [
          "Dom.ts",
          638,
          18
        ]
      ],
      "id": 5531,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A helper function to set top, left, width, height of DOM element.",
          "returns": "DOMFormContext",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "size",
              "comment": "",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "scopeID",
      "source": [
        [
          "Dom.ts",
          595,
          16
        ]
      ],
      "id": 5524,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to generate an ID string for a scope, based on a \"player\" item in the Space.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [
            {
              "name": "item",
              "comment": "a \"player\" item that's added to space (see `space.add(...)`) and has an `animateID` property\n",
              "type": "IPlayer",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "square",
      "source": [
        [
          "Dom.ts",
          723,
          15
        ]
      ],
      "id": 5559,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a square.",
          "returns": "HTMLElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of HTMLForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position of the square",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "halfsize",
              "comment": "half size of the square\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "style",
      "source": [
        [
          "Dom.ts",
          607,
          14
        ]
      ],
      "id": 5527,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to help adding style object to an element. This put all styles into `style` attribute instead of individual attributes, so that the styles can be parsed by Adobe Illustrator.",
          "returns": "Element",
          "returns_comment": "DOM element\n",
          "parameters": [
            {
              "name": "elem",
              "comment": "A DOM element to add to",
              "type": "Element",
              "default": false
            },
            {
              "name": "styles",
              "comment": "an object of style properties",
              "type": "object",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`HTMLForm.style(elem, {fill: \"#f90\", stroke: false})`"
            }
          ]
        }
      ]
    },
    {
      "name": "text",
      "source": [
        [
          "Dom.ts",
          779,
          13
        ]
      ],
      "id": 5575,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw text.",
          "returns": "Element",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of HTMLForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "txt",
              "comment": "",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "textStyle",
      "source": [
        [
          "Dom.ts",
          651,
          18
        ]
      ],
      "id": 5536,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A helper function to set the top and left position styling of text DOM context.",
          "returns": "DOMFormContext",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "context to add style to",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "a Pt object or numeric array determining the top-left position of the text\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [
    {
      "name": "domID",
      "source": [
        [
          "Dom.ts",
          393,
          14
        ]
      ],
      "id": 5472,
      "flags": {
        "isStatic": true
      },
      "type": "domID",
      "overrides": false,
      "inherits": false,
      "comment": ""
    },
    {
      "name": "groupID",
      "source": [
        [
          "Dom.ts",
          392,
          16
        ]
      ],
      "id": 5471,
      "flags": {
        "isStatic": true
      },
      "type": "groupID",
      "overrides": false,
      "inherits": false,
      "comment": ""
    }
  ],
  "flags": {},
  "extends": [
    "VisualForm"
  ],
  "implements": []
}